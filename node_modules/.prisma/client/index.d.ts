
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model CTHD
 * 
 */
export type CTHD = $Result.DefaultSelection<Prisma.$CTHDPayload>
/**
 * Model HOADON
 * 
 */
export type HOADON = $Result.DefaultSelection<Prisma.$HOADONPayload>
/**
 * Model KHACHHANG
 * 
 */
export type KHACHHANG = $Result.DefaultSelection<Prisma.$KHACHHANGPayload>
/**
 * Model NHANVIEN
 * 
 */
export type NHANVIEN = $Result.DefaultSelection<Prisma.$NHANVIENPayload>
/**
 * Model SANPHAM
 * 
 */
export type SANPHAM = $Result.DefaultSelection<Prisma.$SANPHAMPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more CTHDS
 * const cTHDS = await prisma.cTHD.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more CTHDS
   * const cTHDS = await prisma.cTHD.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.cTHD`: Exposes CRUD operations for the **CTHD** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CTHDS
    * const cTHDS = await prisma.cTHD.findMany()
    * ```
    */
  get cTHD(): Prisma.CTHDDelegate<ExtArgs>;

  /**
   * `prisma.hOADON`: Exposes CRUD operations for the **HOADON** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HOADONS
    * const hOADONS = await prisma.hOADON.findMany()
    * ```
    */
  get hOADON(): Prisma.HOADONDelegate<ExtArgs>;

  /**
   * `prisma.kHACHHANG`: Exposes CRUD operations for the **KHACHHANG** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KHACHHANGS
    * const kHACHHANGS = await prisma.kHACHHANG.findMany()
    * ```
    */
  get kHACHHANG(): Prisma.KHACHHANGDelegate<ExtArgs>;

  /**
   * `prisma.nHANVIEN`: Exposes CRUD operations for the **NHANVIEN** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NHANVIENS
    * const nHANVIENS = await prisma.nHANVIEN.findMany()
    * ```
    */
  get nHANVIEN(): Prisma.NHANVIENDelegate<ExtArgs>;

  /**
   * `prisma.sANPHAM`: Exposes CRUD operations for the **SANPHAM** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SANPHAMS
    * const sANPHAMS = await prisma.sANPHAM.findMany()
    * ```
    */
  get sANPHAM(): Prisma.SANPHAMDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.3.1
   * Query Engine version: 61e140623197a131c2a6189271ffee05a7aa9a59
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    CTHD: 'CTHD',
    HOADON: 'HOADON',
    KHACHHANG: 'KHACHHANG',
    NHANVIEN: 'NHANVIEN',
    SANPHAM: 'SANPHAM'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'cTHD' | 'hOADON' | 'kHACHHANG' | 'nHANVIEN' | 'sANPHAM'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      CTHD: {
        payload: Prisma.$CTHDPayload<ExtArgs>
        fields: Prisma.CTHDFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CTHDFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CTHDPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CTHDFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CTHDPayload>
          }
          findFirst: {
            args: Prisma.CTHDFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CTHDPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CTHDFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CTHDPayload>
          }
          findMany: {
            args: Prisma.CTHDFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CTHDPayload>[]
          }
          create: {
            args: Prisma.CTHDCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CTHDPayload>
          }
          createMany: {
            args: Prisma.CTHDCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CTHDDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CTHDPayload>
          }
          update: {
            args: Prisma.CTHDUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CTHDPayload>
          }
          deleteMany: {
            args: Prisma.CTHDDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CTHDUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CTHDUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CTHDPayload>
          }
          aggregate: {
            args: Prisma.CTHDAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCTHD>
          }
          groupBy: {
            args: Prisma.CTHDGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CTHDGroupByOutputType>[]
          }
          count: {
            args: Prisma.CTHDCountArgs<ExtArgs>,
            result: $Utils.Optional<CTHDCountAggregateOutputType> | number
          }
        }
      }
      HOADON: {
        payload: Prisma.$HOADONPayload<ExtArgs>
        fields: Prisma.HOADONFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HOADONFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HOADONPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HOADONFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HOADONPayload>
          }
          findFirst: {
            args: Prisma.HOADONFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HOADONPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HOADONFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HOADONPayload>
          }
          findMany: {
            args: Prisma.HOADONFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HOADONPayload>[]
          }
          create: {
            args: Prisma.HOADONCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HOADONPayload>
          }
          createMany: {
            args: Prisma.HOADONCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HOADONDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HOADONPayload>
          }
          update: {
            args: Prisma.HOADONUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HOADONPayload>
          }
          deleteMany: {
            args: Prisma.HOADONDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HOADONUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HOADONUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HOADONPayload>
          }
          aggregate: {
            args: Prisma.HOADONAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHOADON>
          }
          groupBy: {
            args: Prisma.HOADONGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HOADONGroupByOutputType>[]
          }
          count: {
            args: Prisma.HOADONCountArgs<ExtArgs>,
            result: $Utils.Optional<HOADONCountAggregateOutputType> | number
          }
        }
      }
      KHACHHANG: {
        payload: Prisma.$KHACHHANGPayload<ExtArgs>
        fields: Prisma.KHACHHANGFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KHACHHANGFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KHACHHANGPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KHACHHANGFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KHACHHANGPayload>
          }
          findFirst: {
            args: Prisma.KHACHHANGFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KHACHHANGPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KHACHHANGFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KHACHHANGPayload>
          }
          findMany: {
            args: Prisma.KHACHHANGFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KHACHHANGPayload>[]
          }
          create: {
            args: Prisma.KHACHHANGCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KHACHHANGPayload>
          }
          createMany: {
            args: Prisma.KHACHHANGCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.KHACHHANGDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KHACHHANGPayload>
          }
          update: {
            args: Prisma.KHACHHANGUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KHACHHANGPayload>
          }
          deleteMany: {
            args: Prisma.KHACHHANGDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.KHACHHANGUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.KHACHHANGUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KHACHHANGPayload>
          }
          aggregate: {
            args: Prisma.KHACHHANGAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateKHACHHANG>
          }
          groupBy: {
            args: Prisma.KHACHHANGGroupByArgs<ExtArgs>,
            result: $Utils.Optional<KHACHHANGGroupByOutputType>[]
          }
          count: {
            args: Prisma.KHACHHANGCountArgs<ExtArgs>,
            result: $Utils.Optional<KHACHHANGCountAggregateOutputType> | number
          }
        }
      }
      NHANVIEN: {
        payload: Prisma.$NHANVIENPayload<ExtArgs>
        fields: Prisma.NHANVIENFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NHANVIENFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NHANVIENPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NHANVIENFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NHANVIENPayload>
          }
          findFirst: {
            args: Prisma.NHANVIENFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NHANVIENPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NHANVIENFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NHANVIENPayload>
          }
          findMany: {
            args: Prisma.NHANVIENFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NHANVIENPayload>[]
          }
          create: {
            args: Prisma.NHANVIENCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NHANVIENPayload>
          }
          createMany: {
            args: Prisma.NHANVIENCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NHANVIENDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NHANVIENPayload>
          }
          update: {
            args: Prisma.NHANVIENUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NHANVIENPayload>
          }
          deleteMany: {
            args: Prisma.NHANVIENDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NHANVIENUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NHANVIENUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NHANVIENPayload>
          }
          aggregate: {
            args: Prisma.NHANVIENAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNHANVIEN>
          }
          groupBy: {
            args: Prisma.NHANVIENGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NHANVIENGroupByOutputType>[]
          }
          count: {
            args: Prisma.NHANVIENCountArgs<ExtArgs>,
            result: $Utils.Optional<NHANVIENCountAggregateOutputType> | number
          }
        }
      }
      SANPHAM: {
        payload: Prisma.$SANPHAMPayload<ExtArgs>
        fields: Prisma.SANPHAMFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SANPHAMFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SANPHAMPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SANPHAMFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SANPHAMPayload>
          }
          findFirst: {
            args: Prisma.SANPHAMFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SANPHAMPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SANPHAMFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SANPHAMPayload>
          }
          findMany: {
            args: Prisma.SANPHAMFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SANPHAMPayload>[]
          }
          create: {
            args: Prisma.SANPHAMCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SANPHAMPayload>
          }
          createMany: {
            args: Prisma.SANPHAMCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SANPHAMDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SANPHAMPayload>
          }
          update: {
            args: Prisma.SANPHAMUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SANPHAMPayload>
          }
          deleteMany: {
            args: Prisma.SANPHAMDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SANPHAMUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SANPHAMUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SANPHAMPayload>
          }
          aggregate: {
            args: Prisma.SANPHAMAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSANPHAM>
          }
          groupBy: {
            args: Prisma.SANPHAMGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SANPHAMGroupByOutputType>[]
          }
          count: {
            args: Prisma.SANPHAMCountArgs<ExtArgs>,
            result: $Utils.Optional<SANPHAMCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type HOADONCountOutputType
   */

  export type HOADONCountOutputType = {
    CTHD: number
  }

  export type HOADONCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    CTHD?: boolean | HOADONCountOutputTypeCountCTHDArgs
  }

  // Custom InputTypes

  /**
   * HOADONCountOutputType without action
   */
  export type HOADONCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HOADONCountOutputType
     */
    select?: HOADONCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * HOADONCountOutputType without action
   */
  export type HOADONCountOutputTypeCountCTHDArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CTHDWhereInput
  }



  /**
   * Count Type KHACHHANGCountOutputType
   */

  export type KHACHHANGCountOutputType = {
    HOADON: number
  }

  export type KHACHHANGCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    HOADON?: boolean | KHACHHANGCountOutputTypeCountHOADONArgs
  }

  // Custom InputTypes

  /**
   * KHACHHANGCountOutputType without action
   */
  export type KHACHHANGCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KHACHHANGCountOutputType
     */
    select?: KHACHHANGCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * KHACHHANGCountOutputType without action
   */
  export type KHACHHANGCountOutputTypeCountHOADONArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: HOADONWhereInput
  }



  /**
   * Count Type NHANVIENCountOutputType
   */

  export type NHANVIENCountOutputType = {
    HOADON: number
  }

  export type NHANVIENCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    HOADON?: boolean | NHANVIENCountOutputTypeCountHOADONArgs
  }

  // Custom InputTypes

  /**
   * NHANVIENCountOutputType without action
   */
  export type NHANVIENCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NHANVIENCountOutputType
     */
    select?: NHANVIENCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * NHANVIENCountOutputType without action
   */
  export type NHANVIENCountOutputTypeCountHOADONArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: HOADONWhereInput
  }



  /**
   * Count Type SANPHAMCountOutputType
   */

  export type SANPHAMCountOutputType = {
    CTHD: number
  }

  export type SANPHAMCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    CTHD?: boolean | SANPHAMCountOutputTypeCountCTHDArgs
  }

  // Custom InputTypes

  /**
   * SANPHAMCountOutputType without action
   */
  export type SANPHAMCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SANPHAMCountOutputType
     */
    select?: SANPHAMCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SANPHAMCountOutputType without action
   */
  export type SANPHAMCountOutputTypeCountCTHDArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CTHDWhereInput
  }



  /**
   * Models
   */

  /**
   * Model CTHD
   */

  export type AggregateCTHD = {
    _count: CTHDCountAggregateOutputType | null
    _avg: CTHDAvgAggregateOutputType | null
    _sum: CTHDSumAggregateOutputType | null
    _min: CTHDMinAggregateOutputType | null
    _max: CTHDMaxAggregateOutputType | null
  }

  export type CTHDAvgAggregateOutputType = {
    SOHD: number | null
    SL: number | null
  }

  export type CTHDSumAggregateOutputType = {
    SOHD: number | null
    SL: number | null
  }

  export type CTHDMinAggregateOutputType = {
    SOHD: number | null
    MASP: string | null
    SL: number | null
  }

  export type CTHDMaxAggregateOutputType = {
    SOHD: number | null
    MASP: string | null
    SL: number | null
  }

  export type CTHDCountAggregateOutputType = {
    SOHD: number
    MASP: number
    SL: number
    _all: number
  }


  export type CTHDAvgAggregateInputType = {
    SOHD?: true
    SL?: true
  }

  export type CTHDSumAggregateInputType = {
    SOHD?: true
    SL?: true
  }

  export type CTHDMinAggregateInputType = {
    SOHD?: true
    MASP?: true
    SL?: true
  }

  export type CTHDMaxAggregateInputType = {
    SOHD?: true
    MASP?: true
    SL?: true
  }

  export type CTHDCountAggregateInputType = {
    SOHD?: true
    MASP?: true
    SL?: true
    _all?: true
  }

  export type CTHDAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CTHD to aggregate.
     */
    where?: CTHDWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CTHDS to fetch.
     */
    orderBy?: CTHDOrderByWithRelationInput | CTHDOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CTHDWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CTHDS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CTHDS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CTHDS
    **/
    _count?: true | CTHDCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CTHDAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CTHDSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CTHDMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CTHDMaxAggregateInputType
  }

  export type GetCTHDAggregateType<T extends CTHDAggregateArgs> = {
        [P in keyof T & keyof AggregateCTHD]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCTHD[P]>
      : GetScalarType<T[P], AggregateCTHD[P]>
  }




  export type CTHDGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CTHDWhereInput
    orderBy?: CTHDOrderByWithAggregationInput | CTHDOrderByWithAggregationInput[]
    by: CTHDScalarFieldEnum[] | CTHDScalarFieldEnum
    having?: CTHDScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CTHDCountAggregateInputType | true
    _avg?: CTHDAvgAggregateInputType
    _sum?: CTHDSumAggregateInputType
    _min?: CTHDMinAggregateInputType
    _max?: CTHDMaxAggregateInputType
  }

  export type CTHDGroupByOutputType = {
    SOHD: number
    MASP: string
    SL: number | null
    _count: CTHDCountAggregateOutputType | null
    _avg: CTHDAvgAggregateOutputType | null
    _sum: CTHDSumAggregateOutputType | null
    _min: CTHDMinAggregateOutputType | null
    _max: CTHDMaxAggregateOutputType | null
  }

  type GetCTHDGroupByPayload<T extends CTHDGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CTHDGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CTHDGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CTHDGroupByOutputType[P]>
            : GetScalarType<T[P], CTHDGroupByOutputType[P]>
        }
      >
    >


  export type CTHDSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    SOHD?: boolean
    MASP?: boolean
    SL?: boolean
    HOADON?: boolean | HOADONDefaultArgs<ExtArgs>
    SANPHAM?: boolean | SANPHAMDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cTHD"]>

  export type CTHDSelectScalar = {
    SOHD?: boolean
    MASP?: boolean
    SL?: boolean
  }

  export type CTHDInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    HOADON?: boolean | HOADONDefaultArgs<ExtArgs>
    SANPHAM?: boolean | SANPHAMDefaultArgs<ExtArgs>
  }


  export type $CTHDPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "CTHD"
    objects: {
      HOADON: Prisma.$HOADONPayload<ExtArgs>
      SANPHAM: Prisma.$SANPHAMPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      SOHD: number
      MASP: string
      SL: number | null
    }, ExtArgs["result"]["cTHD"]>
    composites: {}
  }


  type CTHDGetPayload<S extends boolean | null | undefined | CTHDDefaultArgs> = $Result.GetResult<Prisma.$CTHDPayload, S>

  type CTHDCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CTHDFindManyArgs, 'select' | 'include'> & {
      select?: CTHDCountAggregateInputType | true
    }

  export interface CTHDDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CTHD'], meta: { name: 'CTHD' } }
    /**
     * Find zero or one CTHD that matches the filter.
     * @param {CTHDFindUniqueArgs} args - Arguments to find a CTHD
     * @example
     * // Get one CTHD
     * const cTHD = await prisma.cTHD.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CTHDFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CTHDFindUniqueArgs<ExtArgs>>
    ): Prisma__CTHDClient<$Result.GetResult<Prisma.$CTHDPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CTHD that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CTHDFindUniqueOrThrowArgs} args - Arguments to find a CTHD
     * @example
     * // Get one CTHD
     * const cTHD = await prisma.cTHD.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CTHDFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CTHDFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CTHDClient<$Result.GetResult<Prisma.$CTHDPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CTHD that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CTHDFindFirstArgs} args - Arguments to find a CTHD
     * @example
     * // Get one CTHD
     * const cTHD = await prisma.cTHD.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CTHDFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CTHDFindFirstArgs<ExtArgs>>
    ): Prisma__CTHDClient<$Result.GetResult<Prisma.$CTHDPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CTHD that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CTHDFindFirstOrThrowArgs} args - Arguments to find a CTHD
     * @example
     * // Get one CTHD
     * const cTHD = await prisma.cTHD.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CTHDFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CTHDFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CTHDClient<$Result.GetResult<Prisma.$CTHDPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CTHDS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CTHDFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CTHDS
     * const cTHDS = await prisma.cTHD.findMany()
     * 
     * // Get first 10 CTHDS
     * const cTHDS = await prisma.cTHD.findMany({ take: 10 })
     * 
     * // Only select the `SOHD`
     * const cTHDWithSOHDOnly = await prisma.cTHD.findMany({ select: { SOHD: true } })
     * 
    **/
    findMany<T extends CTHDFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CTHDFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CTHDPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CTHD.
     * @param {CTHDCreateArgs} args - Arguments to create a CTHD.
     * @example
     * // Create one CTHD
     * const CTHD = await prisma.cTHD.create({
     *   data: {
     *     // ... data to create a CTHD
     *   }
     * })
     * 
    **/
    create<T extends CTHDCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CTHDCreateArgs<ExtArgs>>
    ): Prisma__CTHDClient<$Result.GetResult<Prisma.$CTHDPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CTHDS.
     *     @param {CTHDCreateManyArgs} args - Arguments to create many CTHDS.
     *     @example
     *     // Create many CTHDS
     *     const cTHD = await prisma.cTHD.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CTHDCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CTHDCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CTHD.
     * @param {CTHDDeleteArgs} args - Arguments to delete one CTHD.
     * @example
     * // Delete one CTHD
     * const CTHD = await prisma.cTHD.delete({
     *   where: {
     *     // ... filter to delete one CTHD
     *   }
     * })
     * 
    **/
    delete<T extends CTHDDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CTHDDeleteArgs<ExtArgs>>
    ): Prisma__CTHDClient<$Result.GetResult<Prisma.$CTHDPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CTHD.
     * @param {CTHDUpdateArgs} args - Arguments to update one CTHD.
     * @example
     * // Update one CTHD
     * const cTHD = await prisma.cTHD.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CTHDUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CTHDUpdateArgs<ExtArgs>>
    ): Prisma__CTHDClient<$Result.GetResult<Prisma.$CTHDPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CTHDS.
     * @param {CTHDDeleteManyArgs} args - Arguments to filter CTHDS to delete.
     * @example
     * // Delete a few CTHDS
     * const { count } = await prisma.cTHD.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CTHDDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CTHDDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CTHDS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CTHDUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CTHDS
     * const cTHD = await prisma.cTHD.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CTHDUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CTHDUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CTHD.
     * @param {CTHDUpsertArgs} args - Arguments to update or create a CTHD.
     * @example
     * // Update or create a CTHD
     * const cTHD = await prisma.cTHD.upsert({
     *   create: {
     *     // ... data to create a CTHD
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CTHD we want to update
     *   }
     * })
    **/
    upsert<T extends CTHDUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CTHDUpsertArgs<ExtArgs>>
    ): Prisma__CTHDClient<$Result.GetResult<Prisma.$CTHDPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CTHDS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CTHDCountArgs} args - Arguments to filter CTHDS to count.
     * @example
     * // Count the number of CTHDS
     * const count = await prisma.cTHD.count({
     *   where: {
     *     // ... the filter for the CTHDS we want to count
     *   }
     * })
    **/
    count<T extends CTHDCountArgs>(
      args?: Subset<T, CTHDCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CTHDCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CTHD.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CTHDAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CTHDAggregateArgs>(args: Subset<T, CTHDAggregateArgs>): Prisma.PrismaPromise<GetCTHDAggregateType<T>>

    /**
     * Group by CTHD.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CTHDGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CTHDGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CTHDGroupByArgs['orderBy'] }
        : { orderBy?: CTHDGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CTHDGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCTHDGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CTHD model
   */
  readonly fields: CTHDFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CTHD.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CTHDClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    HOADON<T extends HOADONDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HOADONDefaultArgs<ExtArgs>>): Prisma__HOADONClient<$Result.GetResult<Prisma.$HOADONPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    SANPHAM<T extends SANPHAMDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SANPHAMDefaultArgs<ExtArgs>>): Prisma__SANPHAMClient<$Result.GetResult<Prisma.$SANPHAMPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CTHD model
   */ 
  interface CTHDFieldRefs {
    readonly SOHD: FieldRef<"CTHD", 'Int'>
    readonly MASP: FieldRef<"CTHD", 'String'>
    readonly SL: FieldRef<"CTHD", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * CTHD findUnique
   */
  export type CTHDFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CTHD
     */
    select?: CTHDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CTHDInclude<ExtArgs> | null
    /**
     * Filter, which CTHD to fetch.
     */
    where: CTHDWhereUniqueInput
  }


  /**
   * CTHD findUniqueOrThrow
   */
  export type CTHDFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CTHD
     */
    select?: CTHDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CTHDInclude<ExtArgs> | null
    /**
     * Filter, which CTHD to fetch.
     */
    where: CTHDWhereUniqueInput
  }


  /**
   * CTHD findFirst
   */
  export type CTHDFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CTHD
     */
    select?: CTHDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CTHDInclude<ExtArgs> | null
    /**
     * Filter, which CTHD to fetch.
     */
    where?: CTHDWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CTHDS to fetch.
     */
    orderBy?: CTHDOrderByWithRelationInput | CTHDOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CTHDS.
     */
    cursor?: CTHDWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CTHDS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CTHDS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CTHDS.
     */
    distinct?: CTHDScalarFieldEnum | CTHDScalarFieldEnum[]
  }


  /**
   * CTHD findFirstOrThrow
   */
  export type CTHDFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CTHD
     */
    select?: CTHDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CTHDInclude<ExtArgs> | null
    /**
     * Filter, which CTHD to fetch.
     */
    where?: CTHDWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CTHDS to fetch.
     */
    orderBy?: CTHDOrderByWithRelationInput | CTHDOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CTHDS.
     */
    cursor?: CTHDWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CTHDS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CTHDS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CTHDS.
     */
    distinct?: CTHDScalarFieldEnum | CTHDScalarFieldEnum[]
  }


  /**
   * CTHD findMany
   */
  export type CTHDFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CTHD
     */
    select?: CTHDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CTHDInclude<ExtArgs> | null
    /**
     * Filter, which CTHDS to fetch.
     */
    where?: CTHDWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CTHDS to fetch.
     */
    orderBy?: CTHDOrderByWithRelationInput | CTHDOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CTHDS.
     */
    cursor?: CTHDWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CTHDS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CTHDS.
     */
    skip?: number
    distinct?: CTHDScalarFieldEnum | CTHDScalarFieldEnum[]
  }


  /**
   * CTHD create
   */
  export type CTHDCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CTHD
     */
    select?: CTHDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CTHDInclude<ExtArgs> | null
    /**
     * The data needed to create a CTHD.
     */
    data: XOR<CTHDCreateInput, CTHDUncheckedCreateInput>
  }


  /**
   * CTHD createMany
   */
  export type CTHDCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CTHDS.
     */
    data: CTHDCreateManyInput | CTHDCreateManyInput[]
  }


  /**
   * CTHD update
   */
  export type CTHDUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CTHD
     */
    select?: CTHDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CTHDInclude<ExtArgs> | null
    /**
     * The data needed to update a CTHD.
     */
    data: XOR<CTHDUpdateInput, CTHDUncheckedUpdateInput>
    /**
     * Choose, which CTHD to update.
     */
    where: CTHDWhereUniqueInput
  }


  /**
   * CTHD updateMany
   */
  export type CTHDUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CTHDS.
     */
    data: XOR<CTHDUpdateManyMutationInput, CTHDUncheckedUpdateManyInput>
    /**
     * Filter which CTHDS to update
     */
    where?: CTHDWhereInput
  }


  /**
   * CTHD upsert
   */
  export type CTHDUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CTHD
     */
    select?: CTHDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CTHDInclude<ExtArgs> | null
    /**
     * The filter to search for the CTHD to update in case it exists.
     */
    where: CTHDWhereUniqueInput
    /**
     * In case the CTHD found by the `where` argument doesn't exist, create a new CTHD with this data.
     */
    create: XOR<CTHDCreateInput, CTHDUncheckedCreateInput>
    /**
     * In case the CTHD was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CTHDUpdateInput, CTHDUncheckedUpdateInput>
  }


  /**
   * CTHD delete
   */
  export type CTHDDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CTHD
     */
    select?: CTHDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CTHDInclude<ExtArgs> | null
    /**
     * Filter which CTHD to delete.
     */
    where: CTHDWhereUniqueInput
  }


  /**
   * CTHD deleteMany
   */
  export type CTHDDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CTHDS to delete
     */
    where?: CTHDWhereInput
  }


  /**
   * CTHD without action
   */
  export type CTHDDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CTHD
     */
    select?: CTHDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CTHDInclude<ExtArgs> | null
  }



  /**
   * Model HOADON
   */

  export type AggregateHOADON = {
    _count: HOADONCountAggregateOutputType | null
    _avg: HOADONAvgAggregateOutputType | null
    _sum: HOADONSumAggregateOutputType | null
    _min: HOADONMinAggregateOutputType | null
    _max: HOADONMaxAggregateOutputType | null
  }

  export type HOADONAvgAggregateOutputType = {
    SOHD: number | null
    TRIGIA: number | null
  }

  export type HOADONSumAggregateOutputType = {
    SOHD: number | null
    TRIGIA: number | null
  }

  export type HOADONMinAggregateOutputType = {
    SOHD: number | null
    NGHD: Date | null
    MAKH: string | null
    MANV: string | null
    TRIGIA: number | null
  }

  export type HOADONMaxAggregateOutputType = {
    SOHD: number | null
    NGHD: Date | null
    MAKH: string | null
    MANV: string | null
    TRIGIA: number | null
  }

  export type HOADONCountAggregateOutputType = {
    SOHD: number
    NGHD: number
    MAKH: number
    MANV: number
    TRIGIA: number
    _all: number
  }


  export type HOADONAvgAggregateInputType = {
    SOHD?: true
    TRIGIA?: true
  }

  export type HOADONSumAggregateInputType = {
    SOHD?: true
    TRIGIA?: true
  }

  export type HOADONMinAggregateInputType = {
    SOHD?: true
    NGHD?: true
    MAKH?: true
    MANV?: true
    TRIGIA?: true
  }

  export type HOADONMaxAggregateInputType = {
    SOHD?: true
    NGHD?: true
    MAKH?: true
    MANV?: true
    TRIGIA?: true
  }

  export type HOADONCountAggregateInputType = {
    SOHD?: true
    NGHD?: true
    MAKH?: true
    MANV?: true
    TRIGIA?: true
    _all?: true
  }

  export type HOADONAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which HOADON to aggregate.
     */
    where?: HOADONWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HOADONS to fetch.
     */
    orderBy?: HOADONOrderByWithRelationInput | HOADONOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HOADONWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HOADONS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HOADONS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HOADONS
    **/
    _count?: true | HOADONCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HOADONAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HOADONSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HOADONMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HOADONMaxAggregateInputType
  }

  export type GetHOADONAggregateType<T extends HOADONAggregateArgs> = {
        [P in keyof T & keyof AggregateHOADON]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHOADON[P]>
      : GetScalarType<T[P], AggregateHOADON[P]>
  }




  export type HOADONGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: HOADONWhereInput
    orderBy?: HOADONOrderByWithAggregationInput | HOADONOrderByWithAggregationInput[]
    by: HOADONScalarFieldEnum[] | HOADONScalarFieldEnum
    having?: HOADONScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HOADONCountAggregateInputType | true
    _avg?: HOADONAvgAggregateInputType
    _sum?: HOADONSumAggregateInputType
    _min?: HOADONMinAggregateInputType
    _max?: HOADONMaxAggregateInputType
  }

  export type HOADONGroupByOutputType = {
    SOHD: number
    NGHD: Date | null
    MAKH: string | null
    MANV: string | null
    TRIGIA: number | null
    _count: HOADONCountAggregateOutputType | null
    _avg: HOADONAvgAggregateOutputType | null
    _sum: HOADONSumAggregateOutputType | null
    _min: HOADONMinAggregateOutputType | null
    _max: HOADONMaxAggregateOutputType | null
  }

  type GetHOADONGroupByPayload<T extends HOADONGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HOADONGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HOADONGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HOADONGroupByOutputType[P]>
            : GetScalarType<T[P], HOADONGroupByOutputType[P]>
        }
      >
    >


  export type HOADONSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    SOHD?: boolean
    NGHD?: boolean
    MAKH?: boolean
    MANV?: boolean
    TRIGIA?: boolean
    CTHD?: boolean | HOADON$CTHDArgs<ExtArgs>
    KHACHHANG?: boolean | HOADON$KHACHHANGArgs<ExtArgs>
    NHANVIEN?: boolean | HOADON$NHANVIENArgs<ExtArgs>
    _count?: boolean | HOADONCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hOADON"]>

  export type HOADONSelectScalar = {
    SOHD?: boolean
    NGHD?: boolean
    MAKH?: boolean
    MANV?: boolean
    TRIGIA?: boolean
  }

  export type HOADONInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    CTHD?: boolean | HOADON$CTHDArgs<ExtArgs>
    KHACHHANG?: boolean | HOADON$KHACHHANGArgs<ExtArgs>
    NHANVIEN?: boolean | HOADON$NHANVIENArgs<ExtArgs>
    _count?: boolean | HOADONCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $HOADONPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "HOADON"
    objects: {
      CTHD: Prisma.$CTHDPayload<ExtArgs>[]
      KHACHHANG: Prisma.$KHACHHANGPayload<ExtArgs> | null
      NHANVIEN: Prisma.$NHANVIENPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      SOHD: number
      NGHD: Date | null
      MAKH: string | null
      MANV: string | null
      TRIGIA: number | null
    }, ExtArgs["result"]["hOADON"]>
    composites: {}
  }


  type HOADONGetPayload<S extends boolean | null | undefined | HOADONDefaultArgs> = $Result.GetResult<Prisma.$HOADONPayload, S>

  type HOADONCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<HOADONFindManyArgs, 'select' | 'include'> & {
      select?: HOADONCountAggregateInputType | true
    }

  export interface HOADONDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HOADON'], meta: { name: 'HOADON' } }
    /**
     * Find zero or one HOADON that matches the filter.
     * @param {HOADONFindUniqueArgs} args - Arguments to find a HOADON
     * @example
     * // Get one HOADON
     * const hOADON = await prisma.hOADON.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HOADONFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HOADONFindUniqueArgs<ExtArgs>>
    ): Prisma__HOADONClient<$Result.GetResult<Prisma.$HOADONPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one HOADON that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HOADONFindUniqueOrThrowArgs} args - Arguments to find a HOADON
     * @example
     * // Get one HOADON
     * const hOADON = await prisma.hOADON.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HOADONFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HOADONFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HOADONClient<$Result.GetResult<Prisma.$HOADONPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first HOADON that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HOADONFindFirstArgs} args - Arguments to find a HOADON
     * @example
     * // Get one HOADON
     * const hOADON = await prisma.hOADON.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HOADONFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HOADONFindFirstArgs<ExtArgs>>
    ): Prisma__HOADONClient<$Result.GetResult<Prisma.$HOADONPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first HOADON that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HOADONFindFirstOrThrowArgs} args - Arguments to find a HOADON
     * @example
     * // Get one HOADON
     * const hOADON = await prisma.hOADON.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HOADONFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HOADONFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HOADONClient<$Result.GetResult<Prisma.$HOADONPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more HOADONS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HOADONFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HOADONS
     * const hOADONS = await prisma.hOADON.findMany()
     * 
     * // Get first 10 HOADONS
     * const hOADONS = await prisma.hOADON.findMany({ take: 10 })
     * 
     * // Only select the `SOHD`
     * const hOADONWithSOHDOnly = await prisma.hOADON.findMany({ select: { SOHD: true } })
     * 
    **/
    findMany<T extends HOADONFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HOADONFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HOADONPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a HOADON.
     * @param {HOADONCreateArgs} args - Arguments to create a HOADON.
     * @example
     * // Create one HOADON
     * const HOADON = await prisma.hOADON.create({
     *   data: {
     *     // ... data to create a HOADON
     *   }
     * })
     * 
    **/
    create<T extends HOADONCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HOADONCreateArgs<ExtArgs>>
    ): Prisma__HOADONClient<$Result.GetResult<Prisma.$HOADONPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many HOADONS.
     *     @param {HOADONCreateManyArgs} args - Arguments to create many HOADONS.
     *     @example
     *     // Create many HOADONS
     *     const hOADON = await prisma.hOADON.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HOADONCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HOADONCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HOADON.
     * @param {HOADONDeleteArgs} args - Arguments to delete one HOADON.
     * @example
     * // Delete one HOADON
     * const HOADON = await prisma.hOADON.delete({
     *   where: {
     *     // ... filter to delete one HOADON
     *   }
     * })
     * 
    **/
    delete<T extends HOADONDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HOADONDeleteArgs<ExtArgs>>
    ): Prisma__HOADONClient<$Result.GetResult<Prisma.$HOADONPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one HOADON.
     * @param {HOADONUpdateArgs} args - Arguments to update one HOADON.
     * @example
     * // Update one HOADON
     * const hOADON = await prisma.hOADON.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HOADONUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HOADONUpdateArgs<ExtArgs>>
    ): Prisma__HOADONClient<$Result.GetResult<Prisma.$HOADONPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more HOADONS.
     * @param {HOADONDeleteManyArgs} args - Arguments to filter HOADONS to delete.
     * @example
     * // Delete a few HOADONS
     * const { count } = await prisma.hOADON.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HOADONDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HOADONDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HOADONS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HOADONUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HOADONS
     * const hOADON = await prisma.hOADON.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HOADONUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HOADONUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HOADON.
     * @param {HOADONUpsertArgs} args - Arguments to update or create a HOADON.
     * @example
     * // Update or create a HOADON
     * const hOADON = await prisma.hOADON.upsert({
     *   create: {
     *     // ... data to create a HOADON
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HOADON we want to update
     *   }
     * })
    **/
    upsert<T extends HOADONUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HOADONUpsertArgs<ExtArgs>>
    ): Prisma__HOADONClient<$Result.GetResult<Prisma.$HOADONPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of HOADONS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HOADONCountArgs} args - Arguments to filter HOADONS to count.
     * @example
     * // Count the number of HOADONS
     * const count = await prisma.hOADON.count({
     *   where: {
     *     // ... the filter for the HOADONS we want to count
     *   }
     * })
    **/
    count<T extends HOADONCountArgs>(
      args?: Subset<T, HOADONCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HOADONCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HOADON.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HOADONAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HOADONAggregateArgs>(args: Subset<T, HOADONAggregateArgs>): Prisma.PrismaPromise<GetHOADONAggregateType<T>>

    /**
     * Group by HOADON.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HOADONGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HOADONGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HOADONGroupByArgs['orderBy'] }
        : { orderBy?: HOADONGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HOADONGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHOADONGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HOADON model
   */
  readonly fields: HOADONFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HOADON.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HOADONClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    CTHD<T extends HOADON$CTHDArgs<ExtArgs> = {}>(args?: Subset<T, HOADON$CTHDArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CTHDPayload<ExtArgs>, T, 'findMany'> | Null>;

    KHACHHANG<T extends HOADON$KHACHHANGArgs<ExtArgs> = {}>(args?: Subset<T, HOADON$KHACHHANGArgs<ExtArgs>>): Prisma__KHACHHANGClient<$Result.GetResult<Prisma.$KHACHHANGPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    NHANVIEN<T extends HOADON$NHANVIENArgs<ExtArgs> = {}>(args?: Subset<T, HOADON$NHANVIENArgs<ExtArgs>>): Prisma__NHANVIENClient<$Result.GetResult<Prisma.$NHANVIENPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the HOADON model
   */ 
  interface HOADONFieldRefs {
    readonly SOHD: FieldRef<"HOADON", 'Int'>
    readonly NGHD: FieldRef<"HOADON", 'DateTime'>
    readonly MAKH: FieldRef<"HOADON", 'String'>
    readonly MANV: FieldRef<"HOADON", 'String'>
    readonly TRIGIA: FieldRef<"HOADON", 'Float'>
  }
    

  // Custom InputTypes

  /**
   * HOADON findUnique
   */
  export type HOADONFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HOADON
     */
    select?: HOADONSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HOADONInclude<ExtArgs> | null
    /**
     * Filter, which HOADON to fetch.
     */
    where: HOADONWhereUniqueInput
  }


  /**
   * HOADON findUniqueOrThrow
   */
  export type HOADONFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HOADON
     */
    select?: HOADONSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HOADONInclude<ExtArgs> | null
    /**
     * Filter, which HOADON to fetch.
     */
    where: HOADONWhereUniqueInput
  }


  /**
   * HOADON findFirst
   */
  export type HOADONFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HOADON
     */
    select?: HOADONSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HOADONInclude<ExtArgs> | null
    /**
     * Filter, which HOADON to fetch.
     */
    where?: HOADONWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HOADONS to fetch.
     */
    orderBy?: HOADONOrderByWithRelationInput | HOADONOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HOADONS.
     */
    cursor?: HOADONWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HOADONS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HOADONS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HOADONS.
     */
    distinct?: HOADONScalarFieldEnum | HOADONScalarFieldEnum[]
  }


  /**
   * HOADON findFirstOrThrow
   */
  export type HOADONFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HOADON
     */
    select?: HOADONSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HOADONInclude<ExtArgs> | null
    /**
     * Filter, which HOADON to fetch.
     */
    where?: HOADONWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HOADONS to fetch.
     */
    orderBy?: HOADONOrderByWithRelationInput | HOADONOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HOADONS.
     */
    cursor?: HOADONWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HOADONS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HOADONS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HOADONS.
     */
    distinct?: HOADONScalarFieldEnum | HOADONScalarFieldEnum[]
  }


  /**
   * HOADON findMany
   */
  export type HOADONFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HOADON
     */
    select?: HOADONSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HOADONInclude<ExtArgs> | null
    /**
     * Filter, which HOADONS to fetch.
     */
    where?: HOADONWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HOADONS to fetch.
     */
    orderBy?: HOADONOrderByWithRelationInput | HOADONOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HOADONS.
     */
    cursor?: HOADONWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HOADONS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HOADONS.
     */
    skip?: number
    distinct?: HOADONScalarFieldEnum | HOADONScalarFieldEnum[]
  }


  /**
   * HOADON create
   */
  export type HOADONCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HOADON
     */
    select?: HOADONSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HOADONInclude<ExtArgs> | null
    /**
     * The data needed to create a HOADON.
     */
    data: XOR<HOADONCreateInput, HOADONUncheckedCreateInput>
  }


  /**
   * HOADON createMany
   */
  export type HOADONCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HOADONS.
     */
    data: HOADONCreateManyInput | HOADONCreateManyInput[]
  }


  /**
   * HOADON update
   */
  export type HOADONUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HOADON
     */
    select?: HOADONSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HOADONInclude<ExtArgs> | null
    /**
     * The data needed to update a HOADON.
     */
    data: XOR<HOADONUpdateInput, HOADONUncheckedUpdateInput>
    /**
     * Choose, which HOADON to update.
     */
    where: HOADONWhereUniqueInput
  }


  /**
   * HOADON updateMany
   */
  export type HOADONUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HOADONS.
     */
    data: XOR<HOADONUpdateManyMutationInput, HOADONUncheckedUpdateManyInput>
    /**
     * Filter which HOADONS to update
     */
    where?: HOADONWhereInput
  }


  /**
   * HOADON upsert
   */
  export type HOADONUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HOADON
     */
    select?: HOADONSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HOADONInclude<ExtArgs> | null
    /**
     * The filter to search for the HOADON to update in case it exists.
     */
    where: HOADONWhereUniqueInput
    /**
     * In case the HOADON found by the `where` argument doesn't exist, create a new HOADON with this data.
     */
    create: XOR<HOADONCreateInput, HOADONUncheckedCreateInput>
    /**
     * In case the HOADON was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HOADONUpdateInput, HOADONUncheckedUpdateInput>
  }


  /**
   * HOADON delete
   */
  export type HOADONDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HOADON
     */
    select?: HOADONSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HOADONInclude<ExtArgs> | null
    /**
     * Filter which HOADON to delete.
     */
    where: HOADONWhereUniqueInput
  }


  /**
   * HOADON deleteMany
   */
  export type HOADONDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which HOADONS to delete
     */
    where?: HOADONWhereInput
  }


  /**
   * HOADON.CTHD
   */
  export type HOADON$CTHDArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CTHD
     */
    select?: CTHDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CTHDInclude<ExtArgs> | null
    where?: CTHDWhereInput
    orderBy?: CTHDOrderByWithRelationInput | CTHDOrderByWithRelationInput[]
    cursor?: CTHDWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CTHDScalarFieldEnum | CTHDScalarFieldEnum[]
  }


  /**
   * HOADON.KHACHHANG
   */
  export type HOADON$KHACHHANGArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KHACHHANG
     */
    select?: KHACHHANGSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KHACHHANGInclude<ExtArgs> | null
    where?: KHACHHANGWhereInput
  }


  /**
   * HOADON.NHANVIEN
   */
  export type HOADON$NHANVIENArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NHANVIEN
     */
    select?: NHANVIENSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NHANVIENInclude<ExtArgs> | null
    where?: NHANVIENWhereInput
  }


  /**
   * HOADON without action
   */
  export type HOADONDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HOADON
     */
    select?: HOADONSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HOADONInclude<ExtArgs> | null
  }



  /**
   * Model KHACHHANG
   */

  export type AggregateKHACHHANG = {
    _count: KHACHHANGCountAggregateOutputType | null
    _avg: KHACHHANGAvgAggregateOutputType | null
    _sum: KHACHHANGSumAggregateOutputType | null
    _min: KHACHHANGMinAggregateOutputType | null
    _max: KHACHHANGMaxAggregateOutputType | null
  }

  export type KHACHHANGAvgAggregateOutputType = {
    DOANHSO: number | null
  }

  export type KHACHHANGSumAggregateOutputType = {
    DOANHSO: number | null
  }

  export type KHACHHANGMinAggregateOutputType = {
    MAKH: string | null
    HOTEN: string | null
    DCHI: string | null
    SODT: string | null
    NGSINH: Date | null
    NGDK: Date | null
    DOANHSO: number | null
  }

  export type KHACHHANGMaxAggregateOutputType = {
    MAKH: string | null
    HOTEN: string | null
    DCHI: string | null
    SODT: string | null
    NGSINH: Date | null
    NGDK: Date | null
    DOANHSO: number | null
  }

  export type KHACHHANGCountAggregateOutputType = {
    MAKH: number
    HOTEN: number
    DCHI: number
    SODT: number
    NGSINH: number
    NGDK: number
    DOANHSO: number
    _all: number
  }


  export type KHACHHANGAvgAggregateInputType = {
    DOANHSO?: true
  }

  export type KHACHHANGSumAggregateInputType = {
    DOANHSO?: true
  }

  export type KHACHHANGMinAggregateInputType = {
    MAKH?: true
    HOTEN?: true
    DCHI?: true
    SODT?: true
    NGSINH?: true
    NGDK?: true
    DOANHSO?: true
  }

  export type KHACHHANGMaxAggregateInputType = {
    MAKH?: true
    HOTEN?: true
    DCHI?: true
    SODT?: true
    NGSINH?: true
    NGDK?: true
    DOANHSO?: true
  }

  export type KHACHHANGCountAggregateInputType = {
    MAKH?: true
    HOTEN?: true
    DCHI?: true
    SODT?: true
    NGSINH?: true
    NGDK?: true
    DOANHSO?: true
    _all?: true
  }

  export type KHACHHANGAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which KHACHHANG to aggregate.
     */
    where?: KHACHHANGWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KHACHHANGS to fetch.
     */
    orderBy?: KHACHHANGOrderByWithRelationInput | KHACHHANGOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KHACHHANGWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KHACHHANGS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KHACHHANGS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KHACHHANGS
    **/
    _count?: true | KHACHHANGCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KHACHHANGAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KHACHHANGSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KHACHHANGMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KHACHHANGMaxAggregateInputType
  }

  export type GetKHACHHANGAggregateType<T extends KHACHHANGAggregateArgs> = {
        [P in keyof T & keyof AggregateKHACHHANG]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKHACHHANG[P]>
      : GetScalarType<T[P], AggregateKHACHHANG[P]>
  }




  export type KHACHHANGGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: KHACHHANGWhereInput
    orderBy?: KHACHHANGOrderByWithAggregationInput | KHACHHANGOrderByWithAggregationInput[]
    by: KHACHHANGScalarFieldEnum[] | KHACHHANGScalarFieldEnum
    having?: KHACHHANGScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KHACHHANGCountAggregateInputType | true
    _avg?: KHACHHANGAvgAggregateInputType
    _sum?: KHACHHANGSumAggregateInputType
    _min?: KHACHHANGMinAggregateInputType
    _max?: KHACHHANGMaxAggregateInputType
  }

  export type KHACHHANGGroupByOutputType = {
    MAKH: string
    HOTEN: string | null
    DCHI: string | null
    SODT: string | null
    NGSINH: Date | null
    NGDK: Date | null
    DOANHSO: number | null
    _count: KHACHHANGCountAggregateOutputType | null
    _avg: KHACHHANGAvgAggregateOutputType | null
    _sum: KHACHHANGSumAggregateOutputType | null
    _min: KHACHHANGMinAggregateOutputType | null
    _max: KHACHHANGMaxAggregateOutputType | null
  }

  type GetKHACHHANGGroupByPayload<T extends KHACHHANGGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KHACHHANGGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KHACHHANGGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KHACHHANGGroupByOutputType[P]>
            : GetScalarType<T[P], KHACHHANGGroupByOutputType[P]>
        }
      >
    >


  export type KHACHHANGSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    MAKH?: boolean
    HOTEN?: boolean
    DCHI?: boolean
    SODT?: boolean
    NGSINH?: boolean
    NGDK?: boolean
    DOANHSO?: boolean
    HOADON?: boolean | KHACHHANG$HOADONArgs<ExtArgs>
    _count?: boolean | KHACHHANGCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kHACHHANG"]>

  export type KHACHHANGSelectScalar = {
    MAKH?: boolean
    HOTEN?: boolean
    DCHI?: boolean
    SODT?: boolean
    NGSINH?: boolean
    NGDK?: boolean
    DOANHSO?: boolean
  }

  export type KHACHHANGInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    HOADON?: boolean | KHACHHANG$HOADONArgs<ExtArgs>
    _count?: boolean | KHACHHANGCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $KHACHHANGPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "KHACHHANG"
    objects: {
      HOADON: Prisma.$HOADONPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      MAKH: string
      HOTEN: string | null
      DCHI: string | null
      SODT: string | null
      NGSINH: Date | null
      NGDK: Date | null
      DOANHSO: number | null
    }, ExtArgs["result"]["kHACHHANG"]>
    composites: {}
  }


  type KHACHHANGGetPayload<S extends boolean | null | undefined | KHACHHANGDefaultArgs> = $Result.GetResult<Prisma.$KHACHHANGPayload, S>

  type KHACHHANGCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<KHACHHANGFindManyArgs, 'select' | 'include'> & {
      select?: KHACHHANGCountAggregateInputType | true
    }

  export interface KHACHHANGDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KHACHHANG'], meta: { name: 'KHACHHANG' } }
    /**
     * Find zero or one KHACHHANG that matches the filter.
     * @param {KHACHHANGFindUniqueArgs} args - Arguments to find a KHACHHANG
     * @example
     * // Get one KHACHHANG
     * const kHACHHANG = await prisma.kHACHHANG.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KHACHHANGFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, KHACHHANGFindUniqueArgs<ExtArgs>>
    ): Prisma__KHACHHANGClient<$Result.GetResult<Prisma.$KHACHHANGPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one KHACHHANG that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {KHACHHANGFindUniqueOrThrowArgs} args - Arguments to find a KHACHHANG
     * @example
     * // Get one KHACHHANG
     * const kHACHHANG = await prisma.kHACHHANG.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends KHACHHANGFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KHACHHANGFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__KHACHHANGClient<$Result.GetResult<Prisma.$KHACHHANGPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first KHACHHANG that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KHACHHANGFindFirstArgs} args - Arguments to find a KHACHHANG
     * @example
     * // Get one KHACHHANG
     * const kHACHHANG = await prisma.kHACHHANG.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KHACHHANGFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, KHACHHANGFindFirstArgs<ExtArgs>>
    ): Prisma__KHACHHANGClient<$Result.GetResult<Prisma.$KHACHHANGPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first KHACHHANG that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KHACHHANGFindFirstOrThrowArgs} args - Arguments to find a KHACHHANG
     * @example
     * // Get one KHACHHANG
     * const kHACHHANG = await prisma.kHACHHANG.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends KHACHHANGFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KHACHHANGFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__KHACHHANGClient<$Result.GetResult<Prisma.$KHACHHANGPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more KHACHHANGS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KHACHHANGFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KHACHHANGS
     * const kHACHHANGS = await prisma.kHACHHANG.findMany()
     * 
     * // Get first 10 KHACHHANGS
     * const kHACHHANGS = await prisma.kHACHHANG.findMany({ take: 10 })
     * 
     * // Only select the `MAKH`
     * const kHACHHANGWithMAKHOnly = await prisma.kHACHHANG.findMany({ select: { MAKH: true } })
     * 
    **/
    findMany<T extends KHACHHANGFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KHACHHANGFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KHACHHANGPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a KHACHHANG.
     * @param {KHACHHANGCreateArgs} args - Arguments to create a KHACHHANG.
     * @example
     * // Create one KHACHHANG
     * const KHACHHANG = await prisma.kHACHHANG.create({
     *   data: {
     *     // ... data to create a KHACHHANG
     *   }
     * })
     * 
    **/
    create<T extends KHACHHANGCreateArgs<ExtArgs>>(
      args: SelectSubset<T, KHACHHANGCreateArgs<ExtArgs>>
    ): Prisma__KHACHHANGClient<$Result.GetResult<Prisma.$KHACHHANGPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many KHACHHANGS.
     *     @param {KHACHHANGCreateManyArgs} args - Arguments to create many KHACHHANGS.
     *     @example
     *     // Create many KHACHHANGS
     *     const kHACHHANG = await prisma.kHACHHANG.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KHACHHANGCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KHACHHANGCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a KHACHHANG.
     * @param {KHACHHANGDeleteArgs} args - Arguments to delete one KHACHHANG.
     * @example
     * // Delete one KHACHHANG
     * const KHACHHANG = await prisma.kHACHHANG.delete({
     *   where: {
     *     // ... filter to delete one KHACHHANG
     *   }
     * })
     * 
    **/
    delete<T extends KHACHHANGDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, KHACHHANGDeleteArgs<ExtArgs>>
    ): Prisma__KHACHHANGClient<$Result.GetResult<Prisma.$KHACHHANGPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one KHACHHANG.
     * @param {KHACHHANGUpdateArgs} args - Arguments to update one KHACHHANG.
     * @example
     * // Update one KHACHHANG
     * const kHACHHANG = await prisma.kHACHHANG.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KHACHHANGUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, KHACHHANGUpdateArgs<ExtArgs>>
    ): Prisma__KHACHHANGClient<$Result.GetResult<Prisma.$KHACHHANGPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more KHACHHANGS.
     * @param {KHACHHANGDeleteManyArgs} args - Arguments to filter KHACHHANGS to delete.
     * @example
     * // Delete a few KHACHHANGS
     * const { count } = await prisma.kHACHHANG.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KHACHHANGDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KHACHHANGDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KHACHHANGS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KHACHHANGUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KHACHHANGS
     * const kHACHHANG = await prisma.kHACHHANG.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KHACHHANGUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, KHACHHANGUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one KHACHHANG.
     * @param {KHACHHANGUpsertArgs} args - Arguments to update or create a KHACHHANG.
     * @example
     * // Update or create a KHACHHANG
     * const kHACHHANG = await prisma.kHACHHANG.upsert({
     *   create: {
     *     // ... data to create a KHACHHANG
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KHACHHANG we want to update
     *   }
     * })
    **/
    upsert<T extends KHACHHANGUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, KHACHHANGUpsertArgs<ExtArgs>>
    ): Prisma__KHACHHANGClient<$Result.GetResult<Prisma.$KHACHHANGPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of KHACHHANGS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KHACHHANGCountArgs} args - Arguments to filter KHACHHANGS to count.
     * @example
     * // Count the number of KHACHHANGS
     * const count = await prisma.kHACHHANG.count({
     *   where: {
     *     // ... the filter for the KHACHHANGS we want to count
     *   }
     * })
    **/
    count<T extends KHACHHANGCountArgs>(
      args?: Subset<T, KHACHHANGCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KHACHHANGCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KHACHHANG.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KHACHHANGAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KHACHHANGAggregateArgs>(args: Subset<T, KHACHHANGAggregateArgs>): Prisma.PrismaPromise<GetKHACHHANGAggregateType<T>>

    /**
     * Group by KHACHHANG.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KHACHHANGGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KHACHHANGGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KHACHHANGGroupByArgs['orderBy'] }
        : { orderBy?: KHACHHANGGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KHACHHANGGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKHACHHANGGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KHACHHANG model
   */
  readonly fields: KHACHHANGFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KHACHHANG.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KHACHHANGClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    HOADON<T extends KHACHHANG$HOADONArgs<ExtArgs> = {}>(args?: Subset<T, KHACHHANG$HOADONArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HOADONPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the KHACHHANG model
   */ 
  interface KHACHHANGFieldRefs {
    readonly MAKH: FieldRef<"KHACHHANG", 'String'>
    readonly HOTEN: FieldRef<"KHACHHANG", 'String'>
    readonly DCHI: FieldRef<"KHACHHANG", 'String'>
    readonly SODT: FieldRef<"KHACHHANG", 'String'>
    readonly NGSINH: FieldRef<"KHACHHANG", 'DateTime'>
    readonly NGDK: FieldRef<"KHACHHANG", 'DateTime'>
    readonly DOANHSO: FieldRef<"KHACHHANG", 'Float'>
  }
    

  // Custom InputTypes

  /**
   * KHACHHANG findUnique
   */
  export type KHACHHANGFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KHACHHANG
     */
    select?: KHACHHANGSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KHACHHANGInclude<ExtArgs> | null
    /**
     * Filter, which KHACHHANG to fetch.
     */
    where: KHACHHANGWhereUniqueInput
  }


  /**
   * KHACHHANG findUniqueOrThrow
   */
  export type KHACHHANGFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KHACHHANG
     */
    select?: KHACHHANGSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KHACHHANGInclude<ExtArgs> | null
    /**
     * Filter, which KHACHHANG to fetch.
     */
    where: KHACHHANGWhereUniqueInput
  }


  /**
   * KHACHHANG findFirst
   */
  export type KHACHHANGFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KHACHHANG
     */
    select?: KHACHHANGSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KHACHHANGInclude<ExtArgs> | null
    /**
     * Filter, which KHACHHANG to fetch.
     */
    where?: KHACHHANGWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KHACHHANGS to fetch.
     */
    orderBy?: KHACHHANGOrderByWithRelationInput | KHACHHANGOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KHACHHANGS.
     */
    cursor?: KHACHHANGWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KHACHHANGS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KHACHHANGS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KHACHHANGS.
     */
    distinct?: KHACHHANGScalarFieldEnum | KHACHHANGScalarFieldEnum[]
  }


  /**
   * KHACHHANG findFirstOrThrow
   */
  export type KHACHHANGFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KHACHHANG
     */
    select?: KHACHHANGSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KHACHHANGInclude<ExtArgs> | null
    /**
     * Filter, which KHACHHANG to fetch.
     */
    where?: KHACHHANGWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KHACHHANGS to fetch.
     */
    orderBy?: KHACHHANGOrderByWithRelationInput | KHACHHANGOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KHACHHANGS.
     */
    cursor?: KHACHHANGWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KHACHHANGS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KHACHHANGS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KHACHHANGS.
     */
    distinct?: KHACHHANGScalarFieldEnum | KHACHHANGScalarFieldEnum[]
  }


  /**
   * KHACHHANG findMany
   */
  export type KHACHHANGFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KHACHHANG
     */
    select?: KHACHHANGSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KHACHHANGInclude<ExtArgs> | null
    /**
     * Filter, which KHACHHANGS to fetch.
     */
    where?: KHACHHANGWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KHACHHANGS to fetch.
     */
    orderBy?: KHACHHANGOrderByWithRelationInput | KHACHHANGOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KHACHHANGS.
     */
    cursor?: KHACHHANGWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KHACHHANGS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KHACHHANGS.
     */
    skip?: number
    distinct?: KHACHHANGScalarFieldEnum | KHACHHANGScalarFieldEnum[]
  }


  /**
   * KHACHHANG create
   */
  export type KHACHHANGCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KHACHHANG
     */
    select?: KHACHHANGSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KHACHHANGInclude<ExtArgs> | null
    /**
     * The data needed to create a KHACHHANG.
     */
    data: XOR<KHACHHANGCreateInput, KHACHHANGUncheckedCreateInput>
  }


  /**
   * KHACHHANG createMany
   */
  export type KHACHHANGCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KHACHHANGS.
     */
    data: KHACHHANGCreateManyInput | KHACHHANGCreateManyInput[]
  }


  /**
   * KHACHHANG update
   */
  export type KHACHHANGUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KHACHHANG
     */
    select?: KHACHHANGSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KHACHHANGInclude<ExtArgs> | null
    /**
     * The data needed to update a KHACHHANG.
     */
    data: XOR<KHACHHANGUpdateInput, KHACHHANGUncheckedUpdateInput>
    /**
     * Choose, which KHACHHANG to update.
     */
    where: KHACHHANGWhereUniqueInput
  }


  /**
   * KHACHHANG updateMany
   */
  export type KHACHHANGUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KHACHHANGS.
     */
    data: XOR<KHACHHANGUpdateManyMutationInput, KHACHHANGUncheckedUpdateManyInput>
    /**
     * Filter which KHACHHANGS to update
     */
    where?: KHACHHANGWhereInput
  }


  /**
   * KHACHHANG upsert
   */
  export type KHACHHANGUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KHACHHANG
     */
    select?: KHACHHANGSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KHACHHANGInclude<ExtArgs> | null
    /**
     * The filter to search for the KHACHHANG to update in case it exists.
     */
    where: KHACHHANGWhereUniqueInput
    /**
     * In case the KHACHHANG found by the `where` argument doesn't exist, create a new KHACHHANG with this data.
     */
    create: XOR<KHACHHANGCreateInput, KHACHHANGUncheckedCreateInput>
    /**
     * In case the KHACHHANG was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KHACHHANGUpdateInput, KHACHHANGUncheckedUpdateInput>
  }


  /**
   * KHACHHANG delete
   */
  export type KHACHHANGDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KHACHHANG
     */
    select?: KHACHHANGSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KHACHHANGInclude<ExtArgs> | null
    /**
     * Filter which KHACHHANG to delete.
     */
    where: KHACHHANGWhereUniqueInput
  }


  /**
   * KHACHHANG deleteMany
   */
  export type KHACHHANGDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which KHACHHANGS to delete
     */
    where?: KHACHHANGWhereInput
  }


  /**
   * KHACHHANG.HOADON
   */
  export type KHACHHANG$HOADONArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HOADON
     */
    select?: HOADONSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HOADONInclude<ExtArgs> | null
    where?: HOADONWhereInput
    orderBy?: HOADONOrderByWithRelationInput | HOADONOrderByWithRelationInput[]
    cursor?: HOADONWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HOADONScalarFieldEnum | HOADONScalarFieldEnum[]
  }


  /**
   * KHACHHANG without action
   */
  export type KHACHHANGDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KHACHHANG
     */
    select?: KHACHHANGSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KHACHHANGInclude<ExtArgs> | null
  }



  /**
   * Model NHANVIEN
   */

  export type AggregateNHANVIEN = {
    _count: NHANVIENCountAggregateOutputType | null
    _min: NHANVIENMinAggregateOutputType | null
    _max: NHANVIENMaxAggregateOutputType | null
  }

  export type NHANVIENMinAggregateOutputType = {
    MANV: string | null
    HOTEN: string | null
    SODT: string | null
    NGVL: Date | null
  }

  export type NHANVIENMaxAggregateOutputType = {
    MANV: string | null
    HOTEN: string | null
    SODT: string | null
    NGVL: Date | null
  }

  export type NHANVIENCountAggregateOutputType = {
    MANV: number
    HOTEN: number
    SODT: number
    NGVL: number
    _all: number
  }


  export type NHANVIENMinAggregateInputType = {
    MANV?: true
    HOTEN?: true
    SODT?: true
    NGVL?: true
  }

  export type NHANVIENMaxAggregateInputType = {
    MANV?: true
    HOTEN?: true
    SODT?: true
    NGVL?: true
  }

  export type NHANVIENCountAggregateInputType = {
    MANV?: true
    HOTEN?: true
    SODT?: true
    NGVL?: true
    _all?: true
  }

  export type NHANVIENAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which NHANVIEN to aggregate.
     */
    where?: NHANVIENWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NHANVIENS to fetch.
     */
    orderBy?: NHANVIENOrderByWithRelationInput | NHANVIENOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NHANVIENWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NHANVIENS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NHANVIENS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NHANVIENS
    **/
    _count?: true | NHANVIENCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NHANVIENMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NHANVIENMaxAggregateInputType
  }

  export type GetNHANVIENAggregateType<T extends NHANVIENAggregateArgs> = {
        [P in keyof T & keyof AggregateNHANVIEN]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNHANVIEN[P]>
      : GetScalarType<T[P], AggregateNHANVIEN[P]>
  }




  export type NHANVIENGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NHANVIENWhereInput
    orderBy?: NHANVIENOrderByWithAggregationInput | NHANVIENOrderByWithAggregationInput[]
    by: NHANVIENScalarFieldEnum[] | NHANVIENScalarFieldEnum
    having?: NHANVIENScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NHANVIENCountAggregateInputType | true
    _min?: NHANVIENMinAggregateInputType
    _max?: NHANVIENMaxAggregateInputType
  }

  export type NHANVIENGroupByOutputType = {
    MANV: string
    HOTEN: string | null
    SODT: string | null
    NGVL: Date | null
    _count: NHANVIENCountAggregateOutputType | null
    _min: NHANVIENMinAggregateOutputType | null
    _max: NHANVIENMaxAggregateOutputType | null
  }

  type GetNHANVIENGroupByPayload<T extends NHANVIENGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NHANVIENGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NHANVIENGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NHANVIENGroupByOutputType[P]>
            : GetScalarType<T[P], NHANVIENGroupByOutputType[P]>
        }
      >
    >


  export type NHANVIENSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    MANV?: boolean
    HOTEN?: boolean
    SODT?: boolean
    NGVL?: boolean
    HOADON?: boolean | NHANVIEN$HOADONArgs<ExtArgs>
    _count?: boolean | NHANVIENCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nHANVIEN"]>

  export type NHANVIENSelectScalar = {
    MANV?: boolean
    HOTEN?: boolean
    SODT?: boolean
    NGVL?: boolean
  }

  export type NHANVIENInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    HOADON?: boolean | NHANVIEN$HOADONArgs<ExtArgs>
    _count?: boolean | NHANVIENCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $NHANVIENPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "NHANVIEN"
    objects: {
      HOADON: Prisma.$HOADONPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      MANV: string
      HOTEN: string | null
      SODT: string | null
      NGVL: Date | null
    }, ExtArgs["result"]["nHANVIEN"]>
    composites: {}
  }


  type NHANVIENGetPayload<S extends boolean | null | undefined | NHANVIENDefaultArgs> = $Result.GetResult<Prisma.$NHANVIENPayload, S>

  type NHANVIENCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<NHANVIENFindManyArgs, 'select' | 'include'> & {
      select?: NHANVIENCountAggregateInputType | true
    }

  export interface NHANVIENDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NHANVIEN'], meta: { name: 'NHANVIEN' } }
    /**
     * Find zero or one NHANVIEN that matches the filter.
     * @param {NHANVIENFindUniqueArgs} args - Arguments to find a NHANVIEN
     * @example
     * // Get one NHANVIEN
     * const nHANVIEN = await prisma.nHANVIEN.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NHANVIENFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NHANVIENFindUniqueArgs<ExtArgs>>
    ): Prisma__NHANVIENClient<$Result.GetResult<Prisma.$NHANVIENPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one NHANVIEN that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NHANVIENFindUniqueOrThrowArgs} args - Arguments to find a NHANVIEN
     * @example
     * // Get one NHANVIEN
     * const nHANVIEN = await prisma.nHANVIEN.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NHANVIENFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NHANVIENFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NHANVIENClient<$Result.GetResult<Prisma.$NHANVIENPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first NHANVIEN that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NHANVIENFindFirstArgs} args - Arguments to find a NHANVIEN
     * @example
     * // Get one NHANVIEN
     * const nHANVIEN = await prisma.nHANVIEN.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NHANVIENFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NHANVIENFindFirstArgs<ExtArgs>>
    ): Prisma__NHANVIENClient<$Result.GetResult<Prisma.$NHANVIENPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first NHANVIEN that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NHANVIENFindFirstOrThrowArgs} args - Arguments to find a NHANVIEN
     * @example
     * // Get one NHANVIEN
     * const nHANVIEN = await prisma.nHANVIEN.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NHANVIENFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NHANVIENFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NHANVIENClient<$Result.GetResult<Prisma.$NHANVIENPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more NHANVIENS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NHANVIENFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NHANVIENS
     * const nHANVIENS = await prisma.nHANVIEN.findMany()
     * 
     * // Get first 10 NHANVIENS
     * const nHANVIENS = await prisma.nHANVIEN.findMany({ take: 10 })
     * 
     * // Only select the `MANV`
     * const nHANVIENWithMANVOnly = await prisma.nHANVIEN.findMany({ select: { MANV: true } })
     * 
    **/
    findMany<T extends NHANVIENFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NHANVIENFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NHANVIENPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a NHANVIEN.
     * @param {NHANVIENCreateArgs} args - Arguments to create a NHANVIEN.
     * @example
     * // Create one NHANVIEN
     * const NHANVIEN = await prisma.nHANVIEN.create({
     *   data: {
     *     // ... data to create a NHANVIEN
     *   }
     * })
     * 
    **/
    create<T extends NHANVIENCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NHANVIENCreateArgs<ExtArgs>>
    ): Prisma__NHANVIENClient<$Result.GetResult<Prisma.$NHANVIENPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many NHANVIENS.
     *     @param {NHANVIENCreateManyArgs} args - Arguments to create many NHANVIENS.
     *     @example
     *     // Create many NHANVIENS
     *     const nHANVIEN = await prisma.nHANVIEN.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NHANVIENCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NHANVIENCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a NHANVIEN.
     * @param {NHANVIENDeleteArgs} args - Arguments to delete one NHANVIEN.
     * @example
     * // Delete one NHANVIEN
     * const NHANVIEN = await prisma.nHANVIEN.delete({
     *   where: {
     *     // ... filter to delete one NHANVIEN
     *   }
     * })
     * 
    **/
    delete<T extends NHANVIENDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NHANVIENDeleteArgs<ExtArgs>>
    ): Prisma__NHANVIENClient<$Result.GetResult<Prisma.$NHANVIENPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one NHANVIEN.
     * @param {NHANVIENUpdateArgs} args - Arguments to update one NHANVIEN.
     * @example
     * // Update one NHANVIEN
     * const nHANVIEN = await prisma.nHANVIEN.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NHANVIENUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NHANVIENUpdateArgs<ExtArgs>>
    ): Prisma__NHANVIENClient<$Result.GetResult<Prisma.$NHANVIENPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more NHANVIENS.
     * @param {NHANVIENDeleteManyArgs} args - Arguments to filter NHANVIENS to delete.
     * @example
     * // Delete a few NHANVIENS
     * const { count } = await prisma.nHANVIEN.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NHANVIENDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NHANVIENDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NHANVIENS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NHANVIENUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NHANVIENS
     * const nHANVIEN = await prisma.nHANVIEN.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NHANVIENUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NHANVIENUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NHANVIEN.
     * @param {NHANVIENUpsertArgs} args - Arguments to update or create a NHANVIEN.
     * @example
     * // Update or create a NHANVIEN
     * const nHANVIEN = await prisma.nHANVIEN.upsert({
     *   create: {
     *     // ... data to create a NHANVIEN
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NHANVIEN we want to update
     *   }
     * })
    **/
    upsert<T extends NHANVIENUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NHANVIENUpsertArgs<ExtArgs>>
    ): Prisma__NHANVIENClient<$Result.GetResult<Prisma.$NHANVIENPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of NHANVIENS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NHANVIENCountArgs} args - Arguments to filter NHANVIENS to count.
     * @example
     * // Count the number of NHANVIENS
     * const count = await prisma.nHANVIEN.count({
     *   where: {
     *     // ... the filter for the NHANVIENS we want to count
     *   }
     * })
    **/
    count<T extends NHANVIENCountArgs>(
      args?: Subset<T, NHANVIENCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NHANVIENCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NHANVIEN.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NHANVIENAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NHANVIENAggregateArgs>(args: Subset<T, NHANVIENAggregateArgs>): Prisma.PrismaPromise<GetNHANVIENAggregateType<T>>

    /**
     * Group by NHANVIEN.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NHANVIENGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NHANVIENGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NHANVIENGroupByArgs['orderBy'] }
        : { orderBy?: NHANVIENGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NHANVIENGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNHANVIENGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NHANVIEN model
   */
  readonly fields: NHANVIENFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NHANVIEN.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NHANVIENClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    HOADON<T extends NHANVIEN$HOADONArgs<ExtArgs> = {}>(args?: Subset<T, NHANVIEN$HOADONArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HOADONPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the NHANVIEN model
   */ 
  interface NHANVIENFieldRefs {
    readonly MANV: FieldRef<"NHANVIEN", 'String'>
    readonly HOTEN: FieldRef<"NHANVIEN", 'String'>
    readonly SODT: FieldRef<"NHANVIEN", 'String'>
    readonly NGVL: FieldRef<"NHANVIEN", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * NHANVIEN findUnique
   */
  export type NHANVIENFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NHANVIEN
     */
    select?: NHANVIENSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NHANVIENInclude<ExtArgs> | null
    /**
     * Filter, which NHANVIEN to fetch.
     */
    where: NHANVIENWhereUniqueInput
  }


  /**
   * NHANVIEN findUniqueOrThrow
   */
  export type NHANVIENFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NHANVIEN
     */
    select?: NHANVIENSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NHANVIENInclude<ExtArgs> | null
    /**
     * Filter, which NHANVIEN to fetch.
     */
    where: NHANVIENWhereUniqueInput
  }


  /**
   * NHANVIEN findFirst
   */
  export type NHANVIENFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NHANVIEN
     */
    select?: NHANVIENSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NHANVIENInclude<ExtArgs> | null
    /**
     * Filter, which NHANVIEN to fetch.
     */
    where?: NHANVIENWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NHANVIENS to fetch.
     */
    orderBy?: NHANVIENOrderByWithRelationInput | NHANVIENOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NHANVIENS.
     */
    cursor?: NHANVIENWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NHANVIENS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NHANVIENS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NHANVIENS.
     */
    distinct?: NHANVIENScalarFieldEnum | NHANVIENScalarFieldEnum[]
  }


  /**
   * NHANVIEN findFirstOrThrow
   */
  export type NHANVIENFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NHANVIEN
     */
    select?: NHANVIENSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NHANVIENInclude<ExtArgs> | null
    /**
     * Filter, which NHANVIEN to fetch.
     */
    where?: NHANVIENWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NHANVIENS to fetch.
     */
    orderBy?: NHANVIENOrderByWithRelationInput | NHANVIENOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NHANVIENS.
     */
    cursor?: NHANVIENWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NHANVIENS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NHANVIENS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NHANVIENS.
     */
    distinct?: NHANVIENScalarFieldEnum | NHANVIENScalarFieldEnum[]
  }


  /**
   * NHANVIEN findMany
   */
  export type NHANVIENFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NHANVIEN
     */
    select?: NHANVIENSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NHANVIENInclude<ExtArgs> | null
    /**
     * Filter, which NHANVIENS to fetch.
     */
    where?: NHANVIENWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NHANVIENS to fetch.
     */
    orderBy?: NHANVIENOrderByWithRelationInput | NHANVIENOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NHANVIENS.
     */
    cursor?: NHANVIENWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NHANVIENS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NHANVIENS.
     */
    skip?: number
    distinct?: NHANVIENScalarFieldEnum | NHANVIENScalarFieldEnum[]
  }


  /**
   * NHANVIEN create
   */
  export type NHANVIENCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NHANVIEN
     */
    select?: NHANVIENSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NHANVIENInclude<ExtArgs> | null
    /**
     * The data needed to create a NHANVIEN.
     */
    data: XOR<NHANVIENCreateInput, NHANVIENUncheckedCreateInput>
  }


  /**
   * NHANVIEN createMany
   */
  export type NHANVIENCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NHANVIENS.
     */
    data: NHANVIENCreateManyInput | NHANVIENCreateManyInput[]
  }


  /**
   * NHANVIEN update
   */
  export type NHANVIENUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NHANVIEN
     */
    select?: NHANVIENSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NHANVIENInclude<ExtArgs> | null
    /**
     * The data needed to update a NHANVIEN.
     */
    data: XOR<NHANVIENUpdateInput, NHANVIENUncheckedUpdateInput>
    /**
     * Choose, which NHANVIEN to update.
     */
    where: NHANVIENWhereUniqueInput
  }


  /**
   * NHANVIEN updateMany
   */
  export type NHANVIENUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NHANVIENS.
     */
    data: XOR<NHANVIENUpdateManyMutationInput, NHANVIENUncheckedUpdateManyInput>
    /**
     * Filter which NHANVIENS to update
     */
    where?: NHANVIENWhereInput
  }


  /**
   * NHANVIEN upsert
   */
  export type NHANVIENUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NHANVIEN
     */
    select?: NHANVIENSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NHANVIENInclude<ExtArgs> | null
    /**
     * The filter to search for the NHANVIEN to update in case it exists.
     */
    where: NHANVIENWhereUniqueInput
    /**
     * In case the NHANVIEN found by the `where` argument doesn't exist, create a new NHANVIEN with this data.
     */
    create: XOR<NHANVIENCreateInput, NHANVIENUncheckedCreateInput>
    /**
     * In case the NHANVIEN was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NHANVIENUpdateInput, NHANVIENUncheckedUpdateInput>
  }


  /**
   * NHANVIEN delete
   */
  export type NHANVIENDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NHANVIEN
     */
    select?: NHANVIENSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NHANVIENInclude<ExtArgs> | null
    /**
     * Filter which NHANVIEN to delete.
     */
    where: NHANVIENWhereUniqueInput
  }


  /**
   * NHANVIEN deleteMany
   */
  export type NHANVIENDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which NHANVIENS to delete
     */
    where?: NHANVIENWhereInput
  }


  /**
   * NHANVIEN.HOADON
   */
  export type NHANVIEN$HOADONArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HOADON
     */
    select?: HOADONSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HOADONInclude<ExtArgs> | null
    where?: HOADONWhereInput
    orderBy?: HOADONOrderByWithRelationInput | HOADONOrderByWithRelationInput[]
    cursor?: HOADONWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HOADONScalarFieldEnum | HOADONScalarFieldEnum[]
  }


  /**
   * NHANVIEN without action
   */
  export type NHANVIENDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NHANVIEN
     */
    select?: NHANVIENSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NHANVIENInclude<ExtArgs> | null
  }



  /**
   * Model SANPHAM
   */

  export type AggregateSANPHAM = {
    _count: SANPHAMCountAggregateOutputType | null
    _avg: SANPHAMAvgAggregateOutputType | null
    _sum: SANPHAMSumAggregateOutputType | null
    _min: SANPHAMMinAggregateOutputType | null
    _max: SANPHAMMaxAggregateOutputType | null
  }

  export type SANPHAMAvgAggregateOutputType = {
    GIA: number | null
  }

  export type SANPHAMSumAggregateOutputType = {
    GIA: number | null
  }

  export type SANPHAMMinAggregateOutputType = {
    MASP: string | null
    TENSP: string | null
    DVT: string | null
    NUOCSX: string | null
    GIA: number | null
  }

  export type SANPHAMMaxAggregateOutputType = {
    MASP: string | null
    TENSP: string | null
    DVT: string | null
    NUOCSX: string | null
    GIA: number | null
  }

  export type SANPHAMCountAggregateOutputType = {
    MASP: number
    TENSP: number
    DVT: number
    NUOCSX: number
    GIA: number
    _all: number
  }


  export type SANPHAMAvgAggregateInputType = {
    GIA?: true
  }

  export type SANPHAMSumAggregateInputType = {
    GIA?: true
  }

  export type SANPHAMMinAggregateInputType = {
    MASP?: true
    TENSP?: true
    DVT?: true
    NUOCSX?: true
    GIA?: true
  }

  export type SANPHAMMaxAggregateInputType = {
    MASP?: true
    TENSP?: true
    DVT?: true
    NUOCSX?: true
    GIA?: true
  }

  export type SANPHAMCountAggregateInputType = {
    MASP?: true
    TENSP?: true
    DVT?: true
    NUOCSX?: true
    GIA?: true
    _all?: true
  }

  export type SANPHAMAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SANPHAM to aggregate.
     */
    where?: SANPHAMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SANPHAMS to fetch.
     */
    orderBy?: SANPHAMOrderByWithRelationInput | SANPHAMOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SANPHAMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SANPHAMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SANPHAMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SANPHAMS
    **/
    _count?: true | SANPHAMCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SANPHAMAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SANPHAMSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SANPHAMMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SANPHAMMaxAggregateInputType
  }

  export type GetSANPHAMAggregateType<T extends SANPHAMAggregateArgs> = {
        [P in keyof T & keyof AggregateSANPHAM]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSANPHAM[P]>
      : GetScalarType<T[P], AggregateSANPHAM[P]>
  }




  export type SANPHAMGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SANPHAMWhereInput
    orderBy?: SANPHAMOrderByWithAggregationInput | SANPHAMOrderByWithAggregationInput[]
    by: SANPHAMScalarFieldEnum[] | SANPHAMScalarFieldEnum
    having?: SANPHAMScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SANPHAMCountAggregateInputType | true
    _avg?: SANPHAMAvgAggregateInputType
    _sum?: SANPHAMSumAggregateInputType
    _min?: SANPHAMMinAggregateInputType
    _max?: SANPHAMMaxAggregateInputType
  }

  export type SANPHAMGroupByOutputType = {
    MASP: string
    TENSP: string | null
    DVT: string | null
    NUOCSX: string | null
    GIA: number | null
    _count: SANPHAMCountAggregateOutputType | null
    _avg: SANPHAMAvgAggregateOutputType | null
    _sum: SANPHAMSumAggregateOutputType | null
    _min: SANPHAMMinAggregateOutputType | null
    _max: SANPHAMMaxAggregateOutputType | null
  }

  type GetSANPHAMGroupByPayload<T extends SANPHAMGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SANPHAMGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SANPHAMGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SANPHAMGroupByOutputType[P]>
            : GetScalarType<T[P], SANPHAMGroupByOutputType[P]>
        }
      >
    >


  export type SANPHAMSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    MASP?: boolean
    TENSP?: boolean
    DVT?: boolean
    NUOCSX?: boolean
    GIA?: boolean
    CTHD?: boolean | SANPHAM$CTHDArgs<ExtArgs>
    _count?: boolean | SANPHAMCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sANPHAM"]>

  export type SANPHAMSelectScalar = {
    MASP?: boolean
    TENSP?: boolean
    DVT?: boolean
    NUOCSX?: boolean
    GIA?: boolean
  }

  export type SANPHAMInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    CTHD?: boolean | SANPHAM$CTHDArgs<ExtArgs>
    _count?: boolean | SANPHAMCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SANPHAMPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "SANPHAM"
    objects: {
      CTHD: Prisma.$CTHDPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      MASP: string
      TENSP: string | null
      DVT: string | null
      NUOCSX: string | null
      GIA: number | null
    }, ExtArgs["result"]["sANPHAM"]>
    composites: {}
  }


  type SANPHAMGetPayload<S extends boolean | null | undefined | SANPHAMDefaultArgs> = $Result.GetResult<Prisma.$SANPHAMPayload, S>

  type SANPHAMCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SANPHAMFindManyArgs, 'select' | 'include'> & {
      select?: SANPHAMCountAggregateInputType | true
    }

  export interface SANPHAMDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SANPHAM'], meta: { name: 'SANPHAM' } }
    /**
     * Find zero or one SANPHAM that matches the filter.
     * @param {SANPHAMFindUniqueArgs} args - Arguments to find a SANPHAM
     * @example
     * // Get one SANPHAM
     * const sANPHAM = await prisma.sANPHAM.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SANPHAMFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SANPHAMFindUniqueArgs<ExtArgs>>
    ): Prisma__SANPHAMClient<$Result.GetResult<Prisma.$SANPHAMPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SANPHAM that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SANPHAMFindUniqueOrThrowArgs} args - Arguments to find a SANPHAM
     * @example
     * // Get one SANPHAM
     * const sANPHAM = await prisma.sANPHAM.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SANPHAMFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SANPHAMFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SANPHAMClient<$Result.GetResult<Prisma.$SANPHAMPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SANPHAM that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SANPHAMFindFirstArgs} args - Arguments to find a SANPHAM
     * @example
     * // Get one SANPHAM
     * const sANPHAM = await prisma.sANPHAM.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SANPHAMFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SANPHAMFindFirstArgs<ExtArgs>>
    ): Prisma__SANPHAMClient<$Result.GetResult<Prisma.$SANPHAMPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SANPHAM that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SANPHAMFindFirstOrThrowArgs} args - Arguments to find a SANPHAM
     * @example
     * // Get one SANPHAM
     * const sANPHAM = await prisma.sANPHAM.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SANPHAMFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SANPHAMFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SANPHAMClient<$Result.GetResult<Prisma.$SANPHAMPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SANPHAMS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SANPHAMFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SANPHAMS
     * const sANPHAMS = await prisma.sANPHAM.findMany()
     * 
     * // Get first 10 SANPHAMS
     * const sANPHAMS = await prisma.sANPHAM.findMany({ take: 10 })
     * 
     * // Only select the `MASP`
     * const sANPHAMWithMASPOnly = await prisma.sANPHAM.findMany({ select: { MASP: true } })
     * 
    **/
    findMany<T extends SANPHAMFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SANPHAMFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SANPHAMPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SANPHAM.
     * @param {SANPHAMCreateArgs} args - Arguments to create a SANPHAM.
     * @example
     * // Create one SANPHAM
     * const SANPHAM = await prisma.sANPHAM.create({
     *   data: {
     *     // ... data to create a SANPHAM
     *   }
     * })
     * 
    **/
    create<T extends SANPHAMCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SANPHAMCreateArgs<ExtArgs>>
    ): Prisma__SANPHAMClient<$Result.GetResult<Prisma.$SANPHAMPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SANPHAMS.
     *     @param {SANPHAMCreateManyArgs} args - Arguments to create many SANPHAMS.
     *     @example
     *     // Create many SANPHAMS
     *     const sANPHAM = await prisma.sANPHAM.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SANPHAMCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SANPHAMCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SANPHAM.
     * @param {SANPHAMDeleteArgs} args - Arguments to delete one SANPHAM.
     * @example
     * // Delete one SANPHAM
     * const SANPHAM = await prisma.sANPHAM.delete({
     *   where: {
     *     // ... filter to delete one SANPHAM
     *   }
     * })
     * 
    **/
    delete<T extends SANPHAMDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SANPHAMDeleteArgs<ExtArgs>>
    ): Prisma__SANPHAMClient<$Result.GetResult<Prisma.$SANPHAMPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SANPHAM.
     * @param {SANPHAMUpdateArgs} args - Arguments to update one SANPHAM.
     * @example
     * // Update one SANPHAM
     * const sANPHAM = await prisma.sANPHAM.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SANPHAMUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SANPHAMUpdateArgs<ExtArgs>>
    ): Prisma__SANPHAMClient<$Result.GetResult<Prisma.$SANPHAMPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SANPHAMS.
     * @param {SANPHAMDeleteManyArgs} args - Arguments to filter SANPHAMS to delete.
     * @example
     * // Delete a few SANPHAMS
     * const { count } = await prisma.sANPHAM.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SANPHAMDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SANPHAMDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SANPHAMS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SANPHAMUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SANPHAMS
     * const sANPHAM = await prisma.sANPHAM.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SANPHAMUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SANPHAMUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SANPHAM.
     * @param {SANPHAMUpsertArgs} args - Arguments to update or create a SANPHAM.
     * @example
     * // Update or create a SANPHAM
     * const sANPHAM = await prisma.sANPHAM.upsert({
     *   create: {
     *     // ... data to create a SANPHAM
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SANPHAM we want to update
     *   }
     * })
    **/
    upsert<T extends SANPHAMUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SANPHAMUpsertArgs<ExtArgs>>
    ): Prisma__SANPHAMClient<$Result.GetResult<Prisma.$SANPHAMPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SANPHAMS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SANPHAMCountArgs} args - Arguments to filter SANPHAMS to count.
     * @example
     * // Count the number of SANPHAMS
     * const count = await prisma.sANPHAM.count({
     *   where: {
     *     // ... the filter for the SANPHAMS we want to count
     *   }
     * })
    **/
    count<T extends SANPHAMCountArgs>(
      args?: Subset<T, SANPHAMCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SANPHAMCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SANPHAM.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SANPHAMAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SANPHAMAggregateArgs>(args: Subset<T, SANPHAMAggregateArgs>): Prisma.PrismaPromise<GetSANPHAMAggregateType<T>>

    /**
     * Group by SANPHAM.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SANPHAMGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SANPHAMGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SANPHAMGroupByArgs['orderBy'] }
        : { orderBy?: SANPHAMGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SANPHAMGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSANPHAMGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SANPHAM model
   */
  readonly fields: SANPHAMFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SANPHAM.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SANPHAMClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    CTHD<T extends SANPHAM$CTHDArgs<ExtArgs> = {}>(args?: Subset<T, SANPHAM$CTHDArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CTHDPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SANPHAM model
   */ 
  interface SANPHAMFieldRefs {
    readonly MASP: FieldRef<"SANPHAM", 'String'>
    readonly TENSP: FieldRef<"SANPHAM", 'String'>
    readonly DVT: FieldRef<"SANPHAM", 'String'>
    readonly NUOCSX: FieldRef<"SANPHAM", 'String'>
    readonly GIA: FieldRef<"SANPHAM", 'Float'>
  }
    

  // Custom InputTypes

  /**
   * SANPHAM findUnique
   */
  export type SANPHAMFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SANPHAM
     */
    select?: SANPHAMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SANPHAMInclude<ExtArgs> | null
    /**
     * Filter, which SANPHAM to fetch.
     */
    where: SANPHAMWhereUniqueInput
  }


  /**
   * SANPHAM findUniqueOrThrow
   */
  export type SANPHAMFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SANPHAM
     */
    select?: SANPHAMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SANPHAMInclude<ExtArgs> | null
    /**
     * Filter, which SANPHAM to fetch.
     */
    where: SANPHAMWhereUniqueInput
  }


  /**
   * SANPHAM findFirst
   */
  export type SANPHAMFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SANPHAM
     */
    select?: SANPHAMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SANPHAMInclude<ExtArgs> | null
    /**
     * Filter, which SANPHAM to fetch.
     */
    where?: SANPHAMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SANPHAMS to fetch.
     */
    orderBy?: SANPHAMOrderByWithRelationInput | SANPHAMOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SANPHAMS.
     */
    cursor?: SANPHAMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SANPHAMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SANPHAMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SANPHAMS.
     */
    distinct?: SANPHAMScalarFieldEnum | SANPHAMScalarFieldEnum[]
  }


  /**
   * SANPHAM findFirstOrThrow
   */
  export type SANPHAMFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SANPHAM
     */
    select?: SANPHAMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SANPHAMInclude<ExtArgs> | null
    /**
     * Filter, which SANPHAM to fetch.
     */
    where?: SANPHAMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SANPHAMS to fetch.
     */
    orderBy?: SANPHAMOrderByWithRelationInput | SANPHAMOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SANPHAMS.
     */
    cursor?: SANPHAMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SANPHAMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SANPHAMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SANPHAMS.
     */
    distinct?: SANPHAMScalarFieldEnum | SANPHAMScalarFieldEnum[]
  }


  /**
   * SANPHAM findMany
   */
  export type SANPHAMFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SANPHAM
     */
    select?: SANPHAMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SANPHAMInclude<ExtArgs> | null
    /**
     * Filter, which SANPHAMS to fetch.
     */
    where?: SANPHAMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SANPHAMS to fetch.
     */
    orderBy?: SANPHAMOrderByWithRelationInput | SANPHAMOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SANPHAMS.
     */
    cursor?: SANPHAMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SANPHAMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SANPHAMS.
     */
    skip?: number
    distinct?: SANPHAMScalarFieldEnum | SANPHAMScalarFieldEnum[]
  }


  /**
   * SANPHAM create
   */
  export type SANPHAMCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SANPHAM
     */
    select?: SANPHAMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SANPHAMInclude<ExtArgs> | null
    /**
     * The data needed to create a SANPHAM.
     */
    data: XOR<SANPHAMCreateInput, SANPHAMUncheckedCreateInput>
  }


  /**
   * SANPHAM createMany
   */
  export type SANPHAMCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SANPHAMS.
     */
    data: SANPHAMCreateManyInput | SANPHAMCreateManyInput[]
  }


  /**
   * SANPHAM update
   */
  export type SANPHAMUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SANPHAM
     */
    select?: SANPHAMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SANPHAMInclude<ExtArgs> | null
    /**
     * The data needed to update a SANPHAM.
     */
    data: XOR<SANPHAMUpdateInput, SANPHAMUncheckedUpdateInput>
    /**
     * Choose, which SANPHAM to update.
     */
    where: SANPHAMWhereUniqueInput
  }


  /**
   * SANPHAM updateMany
   */
  export type SANPHAMUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SANPHAMS.
     */
    data: XOR<SANPHAMUpdateManyMutationInput, SANPHAMUncheckedUpdateManyInput>
    /**
     * Filter which SANPHAMS to update
     */
    where?: SANPHAMWhereInput
  }


  /**
   * SANPHAM upsert
   */
  export type SANPHAMUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SANPHAM
     */
    select?: SANPHAMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SANPHAMInclude<ExtArgs> | null
    /**
     * The filter to search for the SANPHAM to update in case it exists.
     */
    where: SANPHAMWhereUniqueInput
    /**
     * In case the SANPHAM found by the `where` argument doesn't exist, create a new SANPHAM with this data.
     */
    create: XOR<SANPHAMCreateInput, SANPHAMUncheckedCreateInput>
    /**
     * In case the SANPHAM was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SANPHAMUpdateInput, SANPHAMUncheckedUpdateInput>
  }


  /**
   * SANPHAM delete
   */
  export type SANPHAMDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SANPHAM
     */
    select?: SANPHAMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SANPHAMInclude<ExtArgs> | null
    /**
     * Filter which SANPHAM to delete.
     */
    where: SANPHAMWhereUniqueInput
  }


  /**
   * SANPHAM deleteMany
   */
  export type SANPHAMDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SANPHAMS to delete
     */
    where?: SANPHAMWhereInput
  }


  /**
   * SANPHAM.CTHD
   */
  export type SANPHAM$CTHDArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CTHD
     */
    select?: CTHDSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CTHDInclude<ExtArgs> | null
    where?: CTHDWhereInput
    orderBy?: CTHDOrderByWithRelationInput | CTHDOrderByWithRelationInput[]
    cursor?: CTHDWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CTHDScalarFieldEnum | CTHDScalarFieldEnum[]
  }


  /**
   * SANPHAM without action
   */
  export type SANPHAMDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SANPHAM
     */
    select?: SANPHAMSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SANPHAMInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable',
    Snapshot: 'Snapshot'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CTHDScalarFieldEnum: {
    SOHD: 'SOHD',
    MASP: 'MASP',
    SL: 'SL'
  };

  export type CTHDScalarFieldEnum = (typeof CTHDScalarFieldEnum)[keyof typeof CTHDScalarFieldEnum]


  export const HOADONScalarFieldEnum: {
    SOHD: 'SOHD',
    NGHD: 'NGHD',
    MAKH: 'MAKH',
    MANV: 'MANV',
    TRIGIA: 'TRIGIA'
  };

  export type HOADONScalarFieldEnum = (typeof HOADONScalarFieldEnum)[keyof typeof HOADONScalarFieldEnum]


  export const KHACHHANGScalarFieldEnum: {
    MAKH: 'MAKH',
    HOTEN: 'HOTEN',
    DCHI: 'DCHI',
    SODT: 'SODT',
    NGSINH: 'NGSINH',
    NGDK: 'NGDK',
    DOANHSO: 'DOANHSO'
  };

  export type KHACHHANGScalarFieldEnum = (typeof KHACHHANGScalarFieldEnum)[keyof typeof KHACHHANGScalarFieldEnum]


  export const NHANVIENScalarFieldEnum: {
    MANV: 'MANV',
    HOTEN: 'HOTEN',
    SODT: 'SODT',
    NGVL: 'NGVL'
  };

  export type NHANVIENScalarFieldEnum = (typeof NHANVIENScalarFieldEnum)[keyof typeof NHANVIENScalarFieldEnum]


  export const SANPHAMScalarFieldEnum: {
    MASP: 'MASP',
    TENSP: 'TENSP',
    DVT: 'DVT',
    NUOCSX: 'NUOCSX',
    GIA: 'GIA'
  };

  export type SANPHAMScalarFieldEnum = (typeof SANPHAMScalarFieldEnum)[keyof typeof SANPHAMScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type CTHDWhereInput = {
    AND?: CTHDWhereInput | CTHDWhereInput[]
    OR?: CTHDWhereInput[]
    NOT?: CTHDWhereInput | CTHDWhereInput[]
    SOHD?: IntFilter<"CTHD"> | number
    MASP?: StringFilter<"CTHD"> | string
    SL?: IntNullableFilter<"CTHD"> | number | null
    HOADON?: XOR<HOADONRelationFilter, HOADONWhereInput>
    SANPHAM?: XOR<SANPHAMRelationFilter, SANPHAMWhereInput>
  }

  export type CTHDOrderByWithRelationInput = {
    SOHD?: SortOrder
    MASP?: SortOrder
    SL?: SortOrderInput | SortOrder
    HOADON?: HOADONOrderByWithRelationInput
    SANPHAM?: SANPHAMOrderByWithRelationInput
  }

  export type CTHDWhereUniqueInput = Prisma.AtLeast<{
    SOHD_MASP?: CTHDSOHDMASPCompoundUniqueInput
    AND?: CTHDWhereInput | CTHDWhereInput[]
    OR?: CTHDWhereInput[]
    NOT?: CTHDWhereInput | CTHDWhereInput[]
    SOHD?: IntFilter<"CTHD"> | number
    MASP?: StringFilter<"CTHD"> | string
    SL?: IntNullableFilter<"CTHD"> | number | null
    HOADON?: XOR<HOADONRelationFilter, HOADONWhereInput>
    SANPHAM?: XOR<SANPHAMRelationFilter, SANPHAMWhereInput>
  }, "SOHD_MASP">

  export type CTHDOrderByWithAggregationInput = {
    SOHD?: SortOrder
    MASP?: SortOrder
    SL?: SortOrderInput | SortOrder
    _count?: CTHDCountOrderByAggregateInput
    _avg?: CTHDAvgOrderByAggregateInput
    _max?: CTHDMaxOrderByAggregateInput
    _min?: CTHDMinOrderByAggregateInput
    _sum?: CTHDSumOrderByAggregateInput
  }

  export type CTHDScalarWhereWithAggregatesInput = {
    AND?: CTHDScalarWhereWithAggregatesInput | CTHDScalarWhereWithAggregatesInput[]
    OR?: CTHDScalarWhereWithAggregatesInput[]
    NOT?: CTHDScalarWhereWithAggregatesInput | CTHDScalarWhereWithAggregatesInput[]
    SOHD?: IntWithAggregatesFilter<"CTHD"> | number
    MASP?: StringWithAggregatesFilter<"CTHD"> | string
    SL?: IntNullableWithAggregatesFilter<"CTHD"> | number | null
  }

  export type HOADONWhereInput = {
    AND?: HOADONWhereInput | HOADONWhereInput[]
    OR?: HOADONWhereInput[]
    NOT?: HOADONWhereInput | HOADONWhereInput[]
    SOHD?: IntFilter<"HOADON"> | number
    NGHD?: DateTimeNullableFilter<"HOADON"> | Date | string | null
    MAKH?: StringNullableFilter<"HOADON"> | string | null
    MANV?: StringNullableFilter<"HOADON"> | string | null
    TRIGIA?: FloatNullableFilter<"HOADON"> | number | null
    CTHD?: CTHDListRelationFilter
    KHACHHANG?: XOR<KHACHHANGNullableRelationFilter, KHACHHANGWhereInput> | null
    NHANVIEN?: XOR<NHANVIENNullableRelationFilter, NHANVIENWhereInput> | null
  }

  export type HOADONOrderByWithRelationInput = {
    SOHD?: SortOrder
    NGHD?: SortOrderInput | SortOrder
    MAKH?: SortOrderInput | SortOrder
    MANV?: SortOrderInput | SortOrder
    TRIGIA?: SortOrderInput | SortOrder
    CTHD?: CTHDOrderByRelationAggregateInput
    KHACHHANG?: KHACHHANGOrderByWithRelationInput
    NHANVIEN?: NHANVIENOrderByWithRelationInput
  }

  export type HOADONWhereUniqueInput = Prisma.AtLeast<{
    SOHD?: number
    AND?: HOADONWhereInput | HOADONWhereInput[]
    OR?: HOADONWhereInput[]
    NOT?: HOADONWhereInput | HOADONWhereInput[]
    NGHD?: DateTimeNullableFilter<"HOADON"> | Date | string | null
    MAKH?: StringNullableFilter<"HOADON"> | string | null
    MANV?: StringNullableFilter<"HOADON"> | string | null
    TRIGIA?: FloatNullableFilter<"HOADON"> | number | null
    CTHD?: CTHDListRelationFilter
    KHACHHANG?: XOR<KHACHHANGNullableRelationFilter, KHACHHANGWhereInput> | null
    NHANVIEN?: XOR<NHANVIENNullableRelationFilter, NHANVIENWhereInput> | null
  }, "SOHD">

  export type HOADONOrderByWithAggregationInput = {
    SOHD?: SortOrder
    NGHD?: SortOrderInput | SortOrder
    MAKH?: SortOrderInput | SortOrder
    MANV?: SortOrderInput | SortOrder
    TRIGIA?: SortOrderInput | SortOrder
    _count?: HOADONCountOrderByAggregateInput
    _avg?: HOADONAvgOrderByAggregateInput
    _max?: HOADONMaxOrderByAggregateInput
    _min?: HOADONMinOrderByAggregateInput
    _sum?: HOADONSumOrderByAggregateInput
  }

  export type HOADONScalarWhereWithAggregatesInput = {
    AND?: HOADONScalarWhereWithAggregatesInput | HOADONScalarWhereWithAggregatesInput[]
    OR?: HOADONScalarWhereWithAggregatesInput[]
    NOT?: HOADONScalarWhereWithAggregatesInput | HOADONScalarWhereWithAggregatesInput[]
    SOHD?: IntWithAggregatesFilter<"HOADON"> | number
    NGHD?: DateTimeNullableWithAggregatesFilter<"HOADON"> | Date | string | null
    MAKH?: StringNullableWithAggregatesFilter<"HOADON"> | string | null
    MANV?: StringNullableWithAggregatesFilter<"HOADON"> | string | null
    TRIGIA?: FloatNullableWithAggregatesFilter<"HOADON"> | number | null
  }

  export type KHACHHANGWhereInput = {
    AND?: KHACHHANGWhereInput | KHACHHANGWhereInput[]
    OR?: KHACHHANGWhereInput[]
    NOT?: KHACHHANGWhereInput | KHACHHANGWhereInput[]
    MAKH?: StringFilter<"KHACHHANG"> | string
    HOTEN?: StringNullableFilter<"KHACHHANG"> | string | null
    DCHI?: StringNullableFilter<"KHACHHANG"> | string | null
    SODT?: StringNullableFilter<"KHACHHANG"> | string | null
    NGSINH?: DateTimeNullableFilter<"KHACHHANG"> | Date | string | null
    NGDK?: DateTimeNullableFilter<"KHACHHANG"> | Date | string | null
    DOANHSO?: FloatNullableFilter<"KHACHHANG"> | number | null
    HOADON?: HOADONListRelationFilter
  }

  export type KHACHHANGOrderByWithRelationInput = {
    MAKH?: SortOrder
    HOTEN?: SortOrderInput | SortOrder
    DCHI?: SortOrderInput | SortOrder
    SODT?: SortOrderInput | SortOrder
    NGSINH?: SortOrderInput | SortOrder
    NGDK?: SortOrderInput | SortOrder
    DOANHSO?: SortOrderInput | SortOrder
    HOADON?: HOADONOrderByRelationAggregateInput
  }

  export type KHACHHANGWhereUniqueInput = Prisma.AtLeast<{
    MAKH?: string
    AND?: KHACHHANGWhereInput | KHACHHANGWhereInput[]
    OR?: KHACHHANGWhereInput[]
    NOT?: KHACHHANGWhereInput | KHACHHANGWhereInput[]
    HOTEN?: StringNullableFilter<"KHACHHANG"> | string | null
    DCHI?: StringNullableFilter<"KHACHHANG"> | string | null
    SODT?: StringNullableFilter<"KHACHHANG"> | string | null
    NGSINH?: DateTimeNullableFilter<"KHACHHANG"> | Date | string | null
    NGDK?: DateTimeNullableFilter<"KHACHHANG"> | Date | string | null
    DOANHSO?: FloatNullableFilter<"KHACHHANG"> | number | null
    HOADON?: HOADONListRelationFilter
  }, "MAKH">

  export type KHACHHANGOrderByWithAggregationInput = {
    MAKH?: SortOrder
    HOTEN?: SortOrderInput | SortOrder
    DCHI?: SortOrderInput | SortOrder
    SODT?: SortOrderInput | SortOrder
    NGSINH?: SortOrderInput | SortOrder
    NGDK?: SortOrderInput | SortOrder
    DOANHSO?: SortOrderInput | SortOrder
    _count?: KHACHHANGCountOrderByAggregateInput
    _avg?: KHACHHANGAvgOrderByAggregateInput
    _max?: KHACHHANGMaxOrderByAggregateInput
    _min?: KHACHHANGMinOrderByAggregateInput
    _sum?: KHACHHANGSumOrderByAggregateInput
  }

  export type KHACHHANGScalarWhereWithAggregatesInput = {
    AND?: KHACHHANGScalarWhereWithAggregatesInput | KHACHHANGScalarWhereWithAggregatesInput[]
    OR?: KHACHHANGScalarWhereWithAggregatesInput[]
    NOT?: KHACHHANGScalarWhereWithAggregatesInput | KHACHHANGScalarWhereWithAggregatesInput[]
    MAKH?: StringWithAggregatesFilter<"KHACHHANG"> | string
    HOTEN?: StringNullableWithAggregatesFilter<"KHACHHANG"> | string | null
    DCHI?: StringNullableWithAggregatesFilter<"KHACHHANG"> | string | null
    SODT?: StringNullableWithAggregatesFilter<"KHACHHANG"> | string | null
    NGSINH?: DateTimeNullableWithAggregatesFilter<"KHACHHANG"> | Date | string | null
    NGDK?: DateTimeNullableWithAggregatesFilter<"KHACHHANG"> | Date | string | null
    DOANHSO?: FloatNullableWithAggregatesFilter<"KHACHHANG"> | number | null
  }

  export type NHANVIENWhereInput = {
    AND?: NHANVIENWhereInput | NHANVIENWhereInput[]
    OR?: NHANVIENWhereInput[]
    NOT?: NHANVIENWhereInput | NHANVIENWhereInput[]
    MANV?: StringFilter<"NHANVIEN"> | string
    HOTEN?: StringNullableFilter<"NHANVIEN"> | string | null
    SODT?: StringNullableFilter<"NHANVIEN"> | string | null
    NGVL?: DateTimeNullableFilter<"NHANVIEN"> | Date | string | null
    HOADON?: HOADONListRelationFilter
  }

  export type NHANVIENOrderByWithRelationInput = {
    MANV?: SortOrder
    HOTEN?: SortOrderInput | SortOrder
    SODT?: SortOrderInput | SortOrder
    NGVL?: SortOrderInput | SortOrder
    HOADON?: HOADONOrderByRelationAggregateInput
  }

  export type NHANVIENWhereUniqueInput = Prisma.AtLeast<{
    MANV?: string
    AND?: NHANVIENWhereInput | NHANVIENWhereInput[]
    OR?: NHANVIENWhereInput[]
    NOT?: NHANVIENWhereInput | NHANVIENWhereInput[]
    HOTEN?: StringNullableFilter<"NHANVIEN"> | string | null
    SODT?: StringNullableFilter<"NHANVIEN"> | string | null
    NGVL?: DateTimeNullableFilter<"NHANVIEN"> | Date | string | null
    HOADON?: HOADONListRelationFilter
  }, "MANV">

  export type NHANVIENOrderByWithAggregationInput = {
    MANV?: SortOrder
    HOTEN?: SortOrderInput | SortOrder
    SODT?: SortOrderInput | SortOrder
    NGVL?: SortOrderInput | SortOrder
    _count?: NHANVIENCountOrderByAggregateInput
    _max?: NHANVIENMaxOrderByAggregateInput
    _min?: NHANVIENMinOrderByAggregateInput
  }

  export type NHANVIENScalarWhereWithAggregatesInput = {
    AND?: NHANVIENScalarWhereWithAggregatesInput | NHANVIENScalarWhereWithAggregatesInput[]
    OR?: NHANVIENScalarWhereWithAggregatesInput[]
    NOT?: NHANVIENScalarWhereWithAggregatesInput | NHANVIENScalarWhereWithAggregatesInput[]
    MANV?: StringWithAggregatesFilter<"NHANVIEN"> | string
    HOTEN?: StringNullableWithAggregatesFilter<"NHANVIEN"> | string | null
    SODT?: StringNullableWithAggregatesFilter<"NHANVIEN"> | string | null
    NGVL?: DateTimeNullableWithAggregatesFilter<"NHANVIEN"> | Date | string | null
  }

  export type SANPHAMWhereInput = {
    AND?: SANPHAMWhereInput | SANPHAMWhereInput[]
    OR?: SANPHAMWhereInput[]
    NOT?: SANPHAMWhereInput | SANPHAMWhereInput[]
    MASP?: StringFilter<"SANPHAM"> | string
    TENSP?: StringNullableFilter<"SANPHAM"> | string | null
    DVT?: StringNullableFilter<"SANPHAM"> | string | null
    NUOCSX?: StringNullableFilter<"SANPHAM"> | string | null
    GIA?: FloatNullableFilter<"SANPHAM"> | number | null
    CTHD?: CTHDListRelationFilter
  }

  export type SANPHAMOrderByWithRelationInput = {
    MASP?: SortOrder
    TENSP?: SortOrderInput | SortOrder
    DVT?: SortOrderInput | SortOrder
    NUOCSX?: SortOrderInput | SortOrder
    GIA?: SortOrderInput | SortOrder
    CTHD?: CTHDOrderByRelationAggregateInput
  }

  export type SANPHAMWhereUniqueInput = Prisma.AtLeast<{
    MASP?: string
    AND?: SANPHAMWhereInput | SANPHAMWhereInput[]
    OR?: SANPHAMWhereInput[]
    NOT?: SANPHAMWhereInput | SANPHAMWhereInput[]
    TENSP?: StringNullableFilter<"SANPHAM"> | string | null
    DVT?: StringNullableFilter<"SANPHAM"> | string | null
    NUOCSX?: StringNullableFilter<"SANPHAM"> | string | null
    GIA?: FloatNullableFilter<"SANPHAM"> | number | null
    CTHD?: CTHDListRelationFilter
  }, "MASP">

  export type SANPHAMOrderByWithAggregationInput = {
    MASP?: SortOrder
    TENSP?: SortOrderInput | SortOrder
    DVT?: SortOrderInput | SortOrder
    NUOCSX?: SortOrderInput | SortOrder
    GIA?: SortOrderInput | SortOrder
    _count?: SANPHAMCountOrderByAggregateInput
    _avg?: SANPHAMAvgOrderByAggregateInput
    _max?: SANPHAMMaxOrderByAggregateInput
    _min?: SANPHAMMinOrderByAggregateInput
    _sum?: SANPHAMSumOrderByAggregateInput
  }

  export type SANPHAMScalarWhereWithAggregatesInput = {
    AND?: SANPHAMScalarWhereWithAggregatesInput | SANPHAMScalarWhereWithAggregatesInput[]
    OR?: SANPHAMScalarWhereWithAggregatesInput[]
    NOT?: SANPHAMScalarWhereWithAggregatesInput | SANPHAMScalarWhereWithAggregatesInput[]
    MASP?: StringWithAggregatesFilter<"SANPHAM"> | string
    TENSP?: StringNullableWithAggregatesFilter<"SANPHAM"> | string | null
    DVT?: StringNullableWithAggregatesFilter<"SANPHAM"> | string | null
    NUOCSX?: StringNullableWithAggregatesFilter<"SANPHAM"> | string | null
    GIA?: FloatNullableWithAggregatesFilter<"SANPHAM"> | number | null
  }

  export type CTHDCreateInput = {
    SL?: number | null
    HOADON: HOADONCreateNestedOneWithoutCTHDInput
    SANPHAM: SANPHAMCreateNestedOneWithoutCTHDInput
  }

  export type CTHDUncheckedCreateInput = {
    SOHD: number
    MASP: string
    SL?: number | null
  }

  export type CTHDUpdateInput = {
    SL?: NullableIntFieldUpdateOperationsInput | number | null
    HOADON?: HOADONUpdateOneRequiredWithoutCTHDNestedInput
    SANPHAM?: SANPHAMUpdateOneRequiredWithoutCTHDNestedInput
  }

  export type CTHDUncheckedUpdateInput = {
    SOHD?: IntFieldUpdateOperationsInput | number
    MASP?: StringFieldUpdateOperationsInput | string
    SL?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CTHDCreateManyInput = {
    SOHD: number
    MASP: string
    SL?: number | null
  }

  export type CTHDUpdateManyMutationInput = {
    SL?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CTHDUncheckedUpdateManyInput = {
    SOHD?: IntFieldUpdateOperationsInput | number
    MASP?: StringFieldUpdateOperationsInput | string
    SL?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type HOADONCreateInput = {
    SOHD: number
    NGHD?: Date | string | null
    TRIGIA?: number | null
    CTHD?: CTHDCreateNestedManyWithoutHOADONInput
    KHACHHANG?: KHACHHANGCreateNestedOneWithoutHOADONInput
    NHANVIEN?: NHANVIENCreateNestedOneWithoutHOADONInput
  }

  export type HOADONUncheckedCreateInput = {
    SOHD: number
    NGHD?: Date | string | null
    MAKH?: string | null
    MANV?: string | null
    TRIGIA?: number | null
    CTHD?: CTHDUncheckedCreateNestedManyWithoutHOADONInput
  }

  export type HOADONUpdateInput = {
    SOHD?: IntFieldUpdateOperationsInput | number
    NGHD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    TRIGIA?: NullableFloatFieldUpdateOperationsInput | number | null
    CTHD?: CTHDUpdateManyWithoutHOADONNestedInput
    KHACHHANG?: KHACHHANGUpdateOneWithoutHOADONNestedInput
    NHANVIEN?: NHANVIENUpdateOneWithoutHOADONNestedInput
  }

  export type HOADONUncheckedUpdateInput = {
    SOHD?: IntFieldUpdateOperationsInput | number
    NGHD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MAKH?: NullableStringFieldUpdateOperationsInput | string | null
    MANV?: NullableStringFieldUpdateOperationsInput | string | null
    TRIGIA?: NullableFloatFieldUpdateOperationsInput | number | null
    CTHD?: CTHDUncheckedUpdateManyWithoutHOADONNestedInput
  }

  export type HOADONCreateManyInput = {
    SOHD: number
    NGHD?: Date | string | null
    MAKH?: string | null
    MANV?: string | null
    TRIGIA?: number | null
  }

  export type HOADONUpdateManyMutationInput = {
    SOHD?: IntFieldUpdateOperationsInput | number
    NGHD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    TRIGIA?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type HOADONUncheckedUpdateManyInput = {
    SOHD?: IntFieldUpdateOperationsInput | number
    NGHD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MAKH?: NullableStringFieldUpdateOperationsInput | string | null
    MANV?: NullableStringFieldUpdateOperationsInput | string | null
    TRIGIA?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type KHACHHANGCreateInput = {
    MAKH: string
    HOTEN?: string | null
    DCHI?: string | null
    SODT?: string | null
    NGSINH?: Date | string | null
    NGDK?: Date | string | null
    DOANHSO?: number | null
    HOADON?: HOADONCreateNestedManyWithoutKHACHHANGInput
  }

  export type KHACHHANGUncheckedCreateInput = {
    MAKH: string
    HOTEN?: string | null
    DCHI?: string | null
    SODT?: string | null
    NGSINH?: Date | string | null
    NGDK?: Date | string | null
    DOANHSO?: number | null
    HOADON?: HOADONUncheckedCreateNestedManyWithoutKHACHHANGInput
  }

  export type KHACHHANGUpdateInput = {
    MAKH?: StringFieldUpdateOperationsInput | string
    HOTEN?: NullableStringFieldUpdateOperationsInput | string | null
    DCHI?: NullableStringFieldUpdateOperationsInput | string | null
    SODT?: NullableStringFieldUpdateOperationsInput | string | null
    NGSINH?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    NGDK?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DOANHSO?: NullableFloatFieldUpdateOperationsInput | number | null
    HOADON?: HOADONUpdateManyWithoutKHACHHANGNestedInput
  }

  export type KHACHHANGUncheckedUpdateInput = {
    MAKH?: StringFieldUpdateOperationsInput | string
    HOTEN?: NullableStringFieldUpdateOperationsInput | string | null
    DCHI?: NullableStringFieldUpdateOperationsInput | string | null
    SODT?: NullableStringFieldUpdateOperationsInput | string | null
    NGSINH?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    NGDK?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DOANHSO?: NullableFloatFieldUpdateOperationsInput | number | null
    HOADON?: HOADONUncheckedUpdateManyWithoutKHACHHANGNestedInput
  }

  export type KHACHHANGCreateManyInput = {
    MAKH: string
    HOTEN?: string | null
    DCHI?: string | null
    SODT?: string | null
    NGSINH?: Date | string | null
    NGDK?: Date | string | null
    DOANHSO?: number | null
  }

  export type KHACHHANGUpdateManyMutationInput = {
    MAKH?: StringFieldUpdateOperationsInput | string
    HOTEN?: NullableStringFieldUpdateOperationsInput | string | null
    DCHI?: NullableStringFieldUpdateOperationsInput | string | null
    SODT?: NullableStringFieldUpdateOperationsInput | string | null
    NGSINH?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    NGDK?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DOANHSO?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type KHACHHANGUncheckedUpdateManyInput = {
    MAKH?: StringFieldUpdateOperationsInput | string
    HOTEN?: NullableStringFieldUpdateOperationsInput | string | null
    DCHI?: NullableStringFieldUpdateOperationsInput | string | null
    SODT?: NullableStringFieldUpdateOperationsInput | string | null
    NGSINH?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    NGDK?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DOANHSO?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type NHANVIENCreateInput = {
    MANV: string
    HOTEN?: string | null
    SODT?: string | null
    NGVL?: Date | string | null
    HOADON?: HOADONCreateNestedManyWithoutNHANVIENInput
  }

  export type NHANVIENUncheckedCreateInput = {
    MANV: string
    HOTEN?: string | null
    SODT?: string | null
    NGVL?: Date | string | null
    HOADON?: HOADONUncheckedCreateNestedManyWithoutNHANVIENInput
  }

  export type NHANVIENUpdateInput = {
    MANV?: StringFieldUpdateOperationsInput | string
    HOTEN?: NullableStringFieldUpdateOperationsInput | string | null
    SODT?: NullableStringFieldUpdateOperationsInput | string | null
    NGVL?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    HOADON?: HOADONUpdateManyWithoutNHANVIENNestedInput
  }

  export type NHANVIENUncheckedUpdateInput = {
    MANV?: StringFieldUpdateOperationsInput | string
    HOTEN?: NullableStringFieldUpdateOperationsInput | string | null
    SODT?: NullableStringFieldUpdateOperationsInput | string | null
    NGVL?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    HOADON?: HOADONUncheckedUpdateManyWithoutNHANVIENNestedInput
  }

  export type NHANVIENCreateManyInput = {
    MANV: string
    HOTEN?: string | null
    SODT?: string | null
    NGVL?: Date | string | null
  }

  export type NHANVIENUpdateManyMutationInput = {
    MANV?: StringFieldUpdateOperationsInput | string
    HOTEN?: NullableStringFieldUpdateOperationsInput | string | null
    SODT?: NullableStringFieldUpdateOperationsInput | string | null
    NGVL?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NHANVIENUncheckedUpdateManyInput = {
    MANV?: StringFieldUpdateOperationsInput | string
    HOTEN?: NullableStringFieldUpdateOperationsInput | string | null
    SODT?: NullableStringFieldUpdateOperationsInput | string | null
    NGVL?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SANPHAMCreateInput = {
    MASP: string
    TENSP?: string | null
    DVT?: string | null
    NUOCSX?: string | null
    GIA?: number | null
    CTHD?: CTHDCreateNestedManyWithoutSANPHAMInput
  }

  export type SANPHAMUncheckedCreateInput = {
    MASP: string
    TENSP?: string | null
    DVT?: string | null
    NUOCSX?: string | null
    GIA?: number | null
    CTHD?: CTHDUncheckedCreateNestedManyWithoutSANPHAMInput
  }

  export type SANPHAMUpdateInput = {
    MASP?: StringFieldUpdateOperationsInput | string
    TENSP?: NullableStringFieldUpdateOperationsInput | string | null
    DVT?: NullableStringFieldUpdateOperationsInput | string | null
    NUOCSX?: NullableStringFieldUpdateOperationsInput | string | null
    GIA?: NullableFloatFieldUpdateOperationsInput | number | null
    CTHD?: CTHDUpdateManyWithoutSANPHAMNestedInput
  }

  export type SANPHAMUncheckedUpdateInput = {
    MASP?: StringFieldUpdateOperationsInput | string
    TENSP?: NullableStringFieldUpdateOperationsInput | string | null
    DVT?: NullableStringFieldUpdateOperationsInput | string | null
    NUOCSX?: NullableStringFieldUpdateOperationsInput | string | null
    GIA?: NullableFloatFieldUpdateOperationsInput | number | null
    CTHD?: CTHDUncheckedUpdateManyWithoutSANPHAMNestedInput
  }

  export type SANPHAMCreateManyInput = {
    MASP: string
    TENSP?: string | null
    DVT?: string | null
    NUOCSX?: string | null
    GIA?: number | null
  }

  export type SANPHAMUpdateManyMutationInput = {
    MASP?: StringFieldUpdateOperationsInput | string
    TENSP?: NullableStringFieldUpdateOperationsInput | string | null
    DVT?: NullableStringFieldUpdateOperationsInput | string | null
    NUOCSX?: NullableStringFieldUpdateOperationsInput | string | null
    GIA?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type SANPHAMUncheckedUpdateManyInput = {
    MASP?: StringFieldUpdateOperationsInput | string
    TENSP?: NullableStringFieldUpdateOperationsInput | string | null
    DVT?: NullableStringFieldUpdateOperationsInput | string | null
    NUOCSX?: NullableStringFieldUpdateOperationsInput | string | null
    GIA?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type HOADONRelationFilter = {
    is?: HOADONWhereInput
    isNot?: HOADONWhereInput
  }

  export type SANPHAMRelationFilter = {
    is?: SANPHAMWhereInput
    isNot?: SANPHAMWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CTHDSOHDMASPCompoundUniqueInput = {
    SOHD: number
    MASP: string
  }

  export type CTHDCountOrderByAggregateInput = {
    SOHD?: SortOrder
    MASP?: SortOrder
    SL?: SortOrder
  }

  export type CTHDAvgOrderByAggregateInput = {
    SOHD?: SortOrder
    SL?: SortOrder
  }

  export type CTHDMaxOrderByAggregateInput = {
    SOHD?: SortOrder
    MASP?: SortOrder
    SL?: SortOrder
  }

  export type CTHDMinOrderByAggregateInput = {
    SOHD?: SortOrder
    MASP?: SortOrder
    SL?: SortOrder
  }

  export type CTHDSumOrderByAggregateInput = {
    SOHD?: SortOrder
    SL?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type CTHDListRelationFilter = {
    every?: CTHDWhereInput
    some?: CTHDWhereInput
    none?: CTHDWhereInput
  }

  export type KHACHHANGNullableRelationFilter = {
    is?: KHACHHANGWhereInput | null
    isNot?: KHACHHANGWhereInput | null
  }

  export type NHANVIENNullableRelationFilter = {
    is?: NHANVIENWhereInput | null
    isNot?: NHANVIENWhereInput | null
  }

  export type CTHDOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HOADONCountOrderByAggregateInput = {
    SOHD?: SortOrder
    NGHD?: SortOrder
    MAKH?: SortOrder
    MANV?: SortOrder
    TRIGIA?: SortOrder
  }

  export type HOADONAvgOrderByAggregateInput = {
    SOHD?: SortOrder
    TRIGIA?: SortOrder
  }

  export type HOADONMaxOrderByAggregateInput = {
    SOHD?: SortOrder
    NGHD?: SortOrder
    MAKH?: SortOrder
    MANV?: SortOrder
    TRIGIA?: SortOrder
  }

  export type HOADONMinOrderByAggregateInput = {
    SOHD?: SortOrder
    NGHD?: SortOrder
    MAKH?: SortOrder
    MANV?: SortOrder
    TRIGIA?: SortOrder
  }

  export type HOADONSumOrderByAggregateInput = {
    SOHD?: SortOrder
    TRIGIA?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type HOADONListRelationFilter = {
    every?: HOADONWhereInput
    some?: HOADONWhereInput
    none?: HOADONWhereInput
  }

  export type HOADONOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KHACHHANGCountOrderByAggregateInput = {
    MAKH?: SortOrder
    HOTEN?: SortOrder
    DCHI?: SortOrder
    SODT?: SortOrder
    NGSINH?: SortOrder
    NGDK?: SortOrder
    DOANHSO?: SortOrder
  }

  export type KHACHHANGAvgOrderByAggregateInput = {
    DOANHSO?: SortOrder
  }

  export type KHACHHANGMaxOrderByAggregateInput = {
    MAKH?: SortOrder
    HOTEN?: SortOrder
    DCHI?: SortOrder
    SODT?: SortOrder
    NGSINH?: SortOrder
    NGDK?: SortOrder
    DOANHSO?: SortOrder
  }

  export type KHACHHANGMinOrderByAggregateInput = {
    MAKH?: SortOrder
    HOTEN?: SortOrder
    DCHI?: SortOrder
    SODT?: SortOrder
    NGSINH?: SortOrder
    NGDK?: SortOrder
    DOANHSO?: SortOrder
  }

  export type KHACHHANGSumOrderByAggregateInput = {
    DOANHSO?: SortOrder
  }

  export type NHANVIENCountOrderByAggregateInput = {
    MANV?: SortOrder
    HOTEN?: SortOrder
    SODT?: SortOrder
    NGVL?: SortOrder
  }

  export type NHANVIENMaxOrderByAggregateInput = {
    MANV?: SortOrder
    HOTEN?: SortOrder
    SODT?: SortOrder
    NGVL?: SortOrder
  }

  export type NHANVIENMinOrderByAggregateInput = {
    MANV?: SortOrder
    HOTEN?: SortOrder
    SODT?: SortOrder
    NGVL?: SortOrder
  }

  export type SANPHAMCountOrderByAggregateInput = {
    MASP?: SortOrder
    TENSP?: SortOrder
    DVT?: SortOrder
    NUOCSX?: SortOrder
    GIA?: SortOrder
  }

  export type SANPHAMAvgOrderByAggregateInput = {
    GIA?: SortOrder
  }

  export type SANPHAMMaxOrderByAggregateInput = {
    MASP?: SortOrder
    TENSP?: SortOrder
    DVT?: SortOrder
    NUOCSX?: SortOrder
    GIA?: SortOrder
  }

  export type SANPHAMMinOrderByAggregateInput = {
    MASP?: SortOrder
    TENSP?: SortOrder
    DVT?: SortOrder
    NUOCSX?: SortOrder
    GIA?: SortOrder
  }

  export type SANPHAMSumOrderByAggregateInput = {
    GIA?: SortOrder
  }

  export type HOADONCreateNestedOneWithoutCTHDInput = {
    create?: XOR<HOADONCreateWithoutCTHDInput, HOADONUncheckedCreateWithoutCTHDInput>
    connectOrCreate?: HOADONCreateOrConnectWithoutCTHDInput
    connect?: HOADONWhereUniqueInput
  }

  export type SANPHAMCreateNestedOneWithoutCTHDInput = {
    create?: XOR<SANPHAMCreateWithoutCTHDInput, SANPHAMUncheckedCreateWithoutCTHDInput>
    connectOrCreate?: SANPHAMCreateOrConnectWithoutCTHDInput
    connect?: SANPHAMWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type HOADONUpdateOneRequiredWithoutCTHDNestedInput = {
    create?: XOR<HOADONCreateWithoutCTHDInput, HOADONUncheckedCreateWithoutCTHDInput>
    connectOrCreate?: HOADONCreateOrConnectWithoutCTHDInput
    upsert?: HOADONUpsertWithoutCTHDInput
    connect?: HOADONWhereUniqueInput
    update?: XOR<XOR<HOADONUpdateToOneWithWhereWithoutCTHDInput, HOADONUpdateWithoutCTHDInput>, HOADONUncheckedUpdateWithoutCTHDInput>
  }

  export type SANPHAMUpdateOneRequiredWithoutCTHDNestedInput = {
    create?: XOR<SANPHAMCreateWithoutCTHDInput, SANPHAMUncheckedCreateWithoutCTHDInput>
    connectOrCreate?: SANPHAMCreateOrConnectWithoutCTHDInput
    upsert?: SANPHAMUpsertWithoutCTHDInput
    connect?: SANPHAMWhereUniqueInput
    update?: XOR<XOR<SANPHAMUpdateToOneWithWhereWithoutCTHDInput, SANPHAMUpdateWithoutCTHDInput>, SANPHAMUncheckedUpdateWithoutCTHDInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type CTHDCreateNestedManyWithoutHOADONInput = {
    create?: XOR<CTHDCreateWithoutHOADONInput, CTHDUncheckedCreateWithoutHOADONInput> | CTHDCreateWithoutHOADONInput[] | CTHDUncheckedCreateWithoutHOADONInput[]
    connectOrCreate?: CTHDCreateOrConnectWithoutHOADONInput | CTHDCreateOrConnectWithoutHOADONInput[]
    createMany?: CTHDCreateManyHOADONInputEnvelope
    connect?: CTHDWhereUniqueInput | CTHDWhereUniqueInput[]
  }

  export type KHACHHANGCreateNestedOneWithoutHOADONInput = {
    create?: XOR<KHACHHANGCreateWithoutHOADONInput, KHACHHANGUncheckedCreateWithoutHOADONInput>
    connectOrCreate?: KHACHHANGCreateOrConnectWithoutHOADONInput
    connect?: KHACHHANGWhereUniqueInput
  }

  export type NHANVIENCreateNestedOneWithoutHOADONInput = {
    create?: XOR<NHANVIENCreateWithoutHOADONInput, NHANVIENUncheckedCreateWithoutHOADONInput>
    connectOrCreate?: NHANVIENCreateOrConnectWithoutHOADONInput
    connect?: NHANVIENWhereUniqueInput
  }

  export type CTHDUncheckedCreateNestedManyWithoutHOADONInput = {
    create?: XOR<CTHDCreateWithoutHOADONInput, CTHDUncheckedCreateWithoutHOADONInput> | CTHDCreateWithoutHOADONInput[] | CTHDUncheckedCreateWithoutHOADONInput[]
    connectOrCreate?: CTHDCreateOrConnectWithoutHOADONInput | CTHDCreateOrConnectWithoutHOADONInput[]
    createMany?: CTHDCreateManyHOADONInputEnvelope
    connect?: CTHDWhereUniqueInput | CTHDWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CTHDUpdateManyWithoutHOADONNestedInput = {
    create?: XOR<CTHDCreateWithoutHOADONInput, CTHDUncheckedCreateWithoutHOADONInput> | CTHDCreateWithoutHOADONInput[] | CTHDUncheckedCreateWithoutHOADONInput[]
    connectOrCreate?: CTHDCreateOrConnectWithoutHOADONInput | CTHDCreateOrConnectWithoutHOADONInput[]
    upsert?: CTHDUpsertWithWhereUniqueWithoutHOADONInput | CTHDUpsertWithWhereUniqueWithoutHOADONInput[]
    createMany?: CTHDCreateManyHOADONInputEnvelope
    set?: CTHDWhereUniqueInput | CTHDWhereUniqueInput[]
    disconnect?: CTHDWhereUniqueInput | CTHDWhereUniqueInput[]
    delete?: CTHDWhereUniqueInput | CTHDWhereUniqueInput[]
    connect?: CTHDWhereUniqueInput | CTHDWhereUniqueInput[]
    update?: CTHDUpdateWithWhereUniqueWithoutHOADONInput | CTHDUpdateWithWhereUniqueWithoutHOADONInput[]
    updateMany?: CTHDUpdateManyWithWhereWithoutHOADONInput | CTHDUpdateManyWithWhereWithoutHOADONInput[]
    deleteMany?: CTHDScalarWhereInput | CTHDScalarWhereInput[]
  }

  export type KHACHHANGUpdateOneWithoutHOADONNestedInput = {
    create?: XOR<KHACHHANGCreateWithoutHOADONInput, KHACHHANGUncheckedCreateWithoutHOADONInput>
    connectOrCreate?: KHACHHANGCreateOrConnectWithoutHOADONInput
    upsert?: KHACHHANGUpsertWithoutHOADONInput
    disconnect?: KHACHHANGWhereInput | boolean
    delete?: KHACHHANGWhereInput | boolean
    connect?: KHACHHANGWhereUniqueInput
    update?: XOR<XOR<KHACHHANGUpdateToOneWithWhereWithoutHOADONInput, KHACHHANGUpdateWithoutHOADONInput>, KHACHHANGUncheckedUpdateWithoutHOADONInput>
  }

  export type NHANVIENUpdateOneWithoutHOADONNestedInput = {
    create?: XOR<NHANVIENCreateWithoutHOADONInput, NHANVIENUncheckedCreateWithoutHOADONInput>
    connectOrCreate?: NHANVIENCreateOrConnectWithoutHOADONInput
    upsert?: NHANVIENUpsertWithoutHOADONInput
    disconnect?: NHANVIENWhereInput | boolean
    delete?: NHANVIENWhereInput | boolean
    connect?: NHANVIENWhereUniqueInput
    update?: XOR<XOR<NHANVIENUpdateToOneWithWhereWithoutHOADONInput, NHANVIENUpdateWithoutHOADONInput>, NHANVIENUncheckedUpdateWithoutHOADONInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CTHDUncheckedUpdateManyWithoutHOADONNestedInput = {
    create?: XOR<CTHDCreateWithoutHOADONInput, CTHDUncheckedCreateWithoutHOADONInput> | CTHDCreateWithoutHOADONInput[] | CTHDUncheckedCreateWithoutHOADONInput[]
    connectOrCreate?: CTHDCreateOrConnectWithoutHOADONInput | CTHDCreateOrConnectWithoutHOADONInput[]
    upsert?: CTHDUpsertWithWhereUniqueWithoutHOADONInput | CTHDUpsertWithWhereUniqueWithoutHOADONInput[]
    createMany?: CTHDCreateManyHOADONInputEnvelope
    set?: CTHDWhereUniqueInput | CTHDWhereUniqueInput[]
    disconnect?: CTHDWhereUniqueInput | CTHDWhereUniqueInput[]
    delete?: CTHDWhereUniqueInput | CTHDWhereUniqueInput[]
    connect?: CTHDWhereUniqueInput | CTHDWhereUniqueInput[]
    update?: CTHDUpdateWithWhereUniqueWithoutHOADONInput | CTHDUpdateWithWhereUniqueWithoutHOADONInput[]
    updateMany?: CTHDUpdateManyWithWhereWithoutHOADONInput | CTHDUpdateManyWithWhereWithoutHOADONInput[]
    deleteMany?: CTHDScalarWhereInput | CTHDScalarWhereInput[]
  }

  export type HOADONCreateNestedManyWithoutKHACHHANGInput = {
    create?: XOR<HOADONCreateWithoutKHACHHANGInput, HOADONUncheckedCreateWithoutKHACHHANGInput> | HOADONCreateWithoutKHACHHANGInput[] | HOADONUncheckedCreateWithoutKHACHHANGInput[]
    connectOrCreate?: HOADONCreateOrConnectWithoutKHACHHANGInput | HOADONCreateOrConnectWithoutKHACHHANGInput[]
    createMany?: HOADONCreateManyKHACHHANGInputEnvelope
    connect?: HOADONWhereUniqueInput | HOADONWhereUniqueInput[]
  }

  export type HOADONUncheckedCreateNestedManyWithoutKHACHHANGInput = {
    create?: XOR<HOADONCreateWithoutKHACHHANGInput, HOADONUncheckedCreateWithoutKHACHHANGInput> | HOADONCreateWithoutKHACHHANGInput[] | HOADONUncheckedCreateWithoutKHACHHANGInput[]
    connectOrCreate?: HOADONCreateOrConnectWithoutKHACHHANGInput | HOADONCreateOrConnectWithoutKHACHHANGInput[]
    createMany?: HOADONCreateManyKHACHHANGInputEnvelope
    connect?: HOADONWhereUniqueInput | HOADONWhereUniqueInput[]
  }

  export type HOADONUpdateManyWithoutKHACHHANGNestedInput = {
    create?: XOR<HOADONCreateWithoutKHACHHANGInput, HOADONUncheckedCreateWithoutKHACHHANGInput> | HOADONCreateWithoutKHACHHANGInput[] | HOADONUncheckedCreateWithoutKHACHHANGInput[]
    connectOrCreate?: HOADONCreateOrConnectWithoutKHACHHANGInput | HOADONCreateOrConnectWithoutKHACHHANGInput[]
    upsert?: HOADONUpsertWithWhereUniqueWithoutKHACHHANGInput | HOADONUpsertWithWhereUniqueWithoutKHACHHANGInput[]
    createMany?: HOADONCreateManyKHACHHANGInputEnvelope
    set?: HOADONWhereUniqueInput | HOADONWhereUniqueInput[]
    disconnect?: HOADONWhereUniqueInput | HOADONWhereUniqueInput[]
    delete?: HOADONWhereUniqueInput | HOADONWhereUniqueInput[]
    connect?: HOADONWhereUniqueInput | HOADONWhereUniqueInput[]
    update?: HOADONUpdateWithWhereUniqueWithoutKHACHHANGInput | HOADONUpdateWithWhereUniqueWithoutKHACHHANGInput[]
    updateMany?: HOADONUpdateManyWithWhereWithoutKHACHHANGInput | HOADONUpdateManyWithWhereWithoutKHACHHANGInput[]
    deleteMany?: HOADONScalarWhereInput | HOADONScalarWhereInput[]
  }

  export type HOADONUncheckedUpdateManyWithoutKHACHHANGNestedInput = {
    create?: XOR<HOADONCreateWithoutKHACHHANGInput, HOADONUncheckedCreateWithoutKHACHHANGInput> | HOADONCreateWithoutKHACHHANGInput[] | HOADONUncheckedCreateWithoutKHACHHANGInput[]
    connectOrCreate?: HOADONCreateOrConnectWithoutKHACHHANGInput | HOADONCreateOrConnectWithoutKHACHHANGInput[]
    upsert?: HOADONUpsertWithWhereUniqueWithoutKHACHHANGInput | HOADONUpsertWithWhereUniqueWithoutKHACHHANGInput[]
    createMany?: HOADONCreateManyKHACHHANGInputEnvelope
    set?: HOADONWhereUniqueInput | HOADONWhereUniqueInput[]
    disconnect?: HOADONWhereUniqueInput | HOADONWhereUniqueInput[]
    delete?: HOADONWhereUniqueInput | HOADONWhereUniqueInput[]
    connect?: HOADONWhereUniqueInput | HOADONWhereUniqueInput[]
    update?: HOADONUpdateWithWhereUniqueWithoutKHACHHANGInput | HOADONUpdateWithWhereUniqueWithoutKHACHHANGInput[]
    updateMany?: HOADONUpdateManyWithWhereWithoutKHACHHANGInput | HOADONUpdateManyWithWhereWithoutKHACHHANGInput[]
    deleteMany?: HOADONScalarWhereInput | HOADONScalarWhereInput[]
  }

  export type HOADONCreateNestedManyWithoutNHANVIENInput = {
    create?: XOR<HOADONCreateWithoutNHANVIENInput, HOADONUncheckedCreateWithoutNHANVIENInput> | HOADONCreateWithoutNHANVIENInput[] | HOADONUncheckedCreateWithoutNHANVIENInput[]
    connectOrCreate?: HOADONCreateOrConnectWithoutNHANVIENInput | HOADONCreateOrConnectWithoutNHANVIENInput[]
    createMany?: HOADONCreateManyNHANVIENInputEnvelope
    connect?: HOADONWhereUniqueInput | HOADONWhereUniqueInput[]
  }

  export type HOADONUncheckedCreateNestedManyWithoutNHANVIENInput = {
    create?: XOR<HOADONCreateWithoutNHANVIENInput, HOADONUncheckedCreateWithoutNHANVIENInput> | HOADONCreateWithoutNHANVIENInput[] | HOADONUncheckedCreateWithoutNHANVIENInput[]
    connectOrCreate?: HOADONCreateOrConnectWithoutNHANVIENInput | HOADONCreateOrConnectWithoutNHANVIENInput[]
    createMany?: HOADONCreateManyNHANVIENInputEnvelope
    connect?: HOADONWhereUniqueInput | HOADONWhereUniqueInput[]
  }

  export type HOADONUpdateManyWithoutNHANVIENNestedInput = {
    create?: XOR<HOADONCreateWithoutNHANVIENInput, HOADONUncheckedCreateWithoutNHANVIENInput> | HOADONCreateWithoutNHANVIENInput[] | HOADONUncheckedCreateWithoutNHANVIENInput[]
    connectOrCreate?: HOADONCreateOrConnectWithoutNHANVIENInput | HOADONCreateOrConnectWithoutNHANVIENInput[]
    upsert?: HOADONUpsertWithWhereUniqueWithoutNHANVIENInput | HOADONUpsertWithWhereUniqueWithoutNHANVIENInput[]
    createMany?: HOADONCreateManyNHANVIENInputEnvelope
    set?: HOADONWhereUniqueInput | HOADONWhereUniqueInput[]
    disconnect?: HOADONWhereUniqueInput | HOADONWhereUniqueInput[]
    delete?: HOADONWhereUniqueInput | HOADONWhereUniqueInput[]
    connect?: HOADONWhereUniqueInput | HOADONWhereUniqueInput[]
    update?: HOADONUpdateWithWhereUniqueWithoutNHANVIENInput | HOADONUpdateWithWhereUniqueWithoutNHANVIENInput[]
    updateMany?: HOADONUpdateManyWithWhereWithoutNHANVIENInput | HOADONUpdateManyWithWhereWithoutNHANVIENInput[]
    deleteMany?: HOADONScalarWhereInput | HOADONScalarWhereInput[]
  }

  export type HOADONUncheckedUpdateManyWithoutNHANVIENNestedInput = {
    create?: XOR<HOADONCreateWithoutNHANVIENInput, HOADONUncheckedCreateWithoutNHANVIENInput> | HOADONCreateWithoutNHANVIENInput[] | HOADONUncheckedCreateWithoutNHANVIENInput[]
    connectOrCreate?: HOADONCreateOrConnectWithoutNHANVIENInput | HOADONCreateOrConnectWithoutNHANVIENInput[]
    upsert?: HOADONUpsertWithWhereUniqueWithoutNHANVIENInput | HOADONUpsertWithWhereUniqueWithoutNHANVIENInput[]
    createMany?: HOADONCreateManyNHANVIENInputEnvelope
    set?: HOADONWhereUniqueInput | HOADONWhereUniqueInput[]
    disconnect?: HOADONWhereUniqueInput | HOADONWhereUniqueInput[]
    delete?: HOADONWhereUniqueInput | HOADONWhereUniqueInput[]
    connect?: HOADONWhereUniqueInput | HOADONWhereUniqueInput[]
    update?: HOADONUpdateWithWhereUniqueWithoutNHANVIENInput | HOADONUpdateWithWhereUniqueWithoutNHANVIENInput[]
    updateMany?: HOADONUpdateManyWithWhereWithoutNHANVIENInput | HOADONUpdateManyWithWhereWithoutNHANVIENInput[]
    deleteMany?: HOADONScalarWhereInput | HOADONScalarWhereInput[]
  }

  export type CTHDCreateNestedManyWithoutSANPHAMInput = {
    create?: XOR<CTHDCreateWithoutSANPHAMInput, CTHDUncheckedCreateWithoutSANPHAMInput> | CTHDCreateWithoutSANPHAMInput[] | CTHDUncheckedCreateWithoutSANPHAMInput[]
    connectOrCreate?: CTHDCreateOrConnectWithoutSANPHAMInput | CTHDCreateOrConnectWithoutSANPHAMInput[]
    createMany?: CTHDCreateManySANPHAMInputEnvelope
    connect?: CTHDWhereUniqueInput | CTHDWhereUniqueInput[]
  }

  export type CTHDUncheckedCreateNestedManyWithoutSANPHAMInput = {
    create?: XOR<CTHDCreateWithoutSANPHAMInput, CTHDUncheckedCreateWithoutSANPHAMInput> | CTHDCreateWithoutSANPHAMInput[] | CTHDUncheckedCreateWithoutSANPHAMInput[]
    connectOrCreate?: CTHDCreateOrConnectWithoutSANPHAMInput | CTHDCreateOrConnectWithoutSANPHAMInput[]
    createMany?: CTHDCreateManySANPHAMInputEnvelope
    connect?: CTHDWhereUniqueInput | CTHDWhereUniqueInput[]
  }

  export type CTHDUpdateManyWithoutSANPHAMNestedInput = {
    create?: XOR<CTHDCreateWithoutSANPHAMInput, CTHDUncheckedCreateWithoutSANPHAMInput> | CTHDCreateWithoutSANPHAMInput[] | CTHDUncheckedCreateWithoutSANPHAMInput[]
    connectOrCreate?: CTHDCreateOrConnectWithoutSANPHAMInput | CTHDCreateOrConnectWithoutSANPHAMInput[]
    upsert?: CTHDUpsertWithWhereUniqueWithoutSANPHAMInput | CTHDUpsertWithWhereUniqueWithoutSANPHAMInput[]
    createMany?: CTHDCreateManySANPHAMInputEnvelope
    set?: CTHDWhereUniqueInput | CTHDWhereUniqueInput[]
    disconnect?: CTHDWhereUniqueInput | CTHDWhereUniqueInput[]
    delete?: CTHDWhereUniqueInput | CTHDWhereUniqueInput[]
    connect?: CTHDWhereUniqueInput | CTHDWhereUniqueInput[]
    update?: CTHDUpdateWithWhereUniqueWithoutSANPHAMInput | CTHDUpdateWithWhereUniqueWithoutSANPHAMInput[]
    updateMany?: CTHDUpdateManyWithWhereWithoutSANPHAMInput | CTHDUpdateManyWithWhereWithoutSANPHAMInput[]
    deleteMany?: CTHDScalarWhereInput | CTHDScalarWhereInput[]
  }

  export type CTHDUncheckedUpdateManyWithoutSANPHAMNestedInput = {
    create?: XOR<CTHDCreateWithoutSANPHAMInput, CTHDUncheckedCreateWithoutSANPHAMInput> | CTHDCreateWithoutSANPHAMInput[] | CTHDUncheckedCreateWithoutSANPHAMInput[]
    connectOrCreate?: CTHDCreateOrConnectWithoutSANPHAMInput | CTHDCreateOrConnectWithoutSANPHAMInput[]
    upsert?: CTHDUpsertWithWhereUniqueWithoutSANPHAMInput | CTHDUpsertWithWhereUniqueWithoutSANPHAMInput[]
    createMany?: CTHDCreateManySANPHAMInputEnvelope
    set?: CTHDWhereUniqueInput | CTHDWhereUniqueInput[]
    disconnect?: CTHDWhereUniqueInput | CTHDWhereUniqueInput[]
    delete?: CTHDWhereUniqueInput | CTHDWhereUniqueInput[]
    connect?: CTHDWhereUniqueInput | CTHDWhereUniqueInput[]
    update?: CTHDUpdateWithWhereUniqueWithoutSANPHAMInput | CTHDUpdateWithWhereUniqueWithoutSANPHAMInput[]
    updateMany?: CTHDUpdateManyWithWhereWithoutSANPHAMInput | CTHDUpdateManyWithWhereWithoutSANPHAMInput[]
    deleteMany?: CTHDScalarWhereInput | CTHDScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type HOADONCreateWithoutCTHDInput = {
    SOHD: number
    NGHD?: Date | string | null
    TRIGIA?: number | null
    KHACHHANG?: KHACHHANGCreateNestedOneWithoutHOADONInput
    NHANVIEN?: NHANVIENCreateNestedOneWithoutHOADONInput
  }

  export type HOADONUncheckedCreateWithoutCTHDInput = {
    SOHD: number
    NGHD?: Date | string | null
    MAKH?: string | null
    MANV?: string | null
    TRIGIA?: number | null
  }

  export type HOADONCreateOrConnectWithoutCTHDInput = {
    where: HOADONWhereUniqueInput
    create: XOR<HOADONCreateWithoutCTHDInput, HOADONUncheckedCreateWithoutCTHDInput>
  }

  export type SANPHAMCreateWithoutCTHDInput = {
    MASP: string
    TENSP?: string | null
    DVT?: string | null
    NUOCSX?: string | null
    GIA?: number | null
  }

  export type SANPHAMUncheckedCreateWithoutCTHDInput = {
    MASP: string
    TENSP?: string | null
    DVT?: string | null
    NUOCSX?: string | null
    GIA?: number | null
  }

  export type SANPHAMCreateOrConnectWithoutCTHDInput = {
    where: SANPHAMWhereUniqueInput
    create: XOR<SANPHAMCreateWithoutCTHDInput, SANPHAMUncheckedCreateWithoutCTHDInput>
  }

  export type HOADONUpsertWithoutCTHDInput = {
    update: XOR<HOADONUpdateWithoutCTHDInput, HOADONUncheckedUpdateWithoutCTHDInput>
    create: XOR<HOADONCreateWithoutCTHDInput, HOADONUncheckedCreateWithoutCTHDInput>
    where?: HOADONWhereInput
  }

  export type HOADONUpdateToOneWithWhereWithoutCTHDInput = {
    where?: HOADONWhereInput
    data: XOR<HOADONUpdateWithoutCTHDInput, HOADONUncheckedUpdateWithoutCTHDInput>
  }

  export type HOADONUpdateWithoutCTHDInput = {
    SOHD?: IntFieldUpdateOperationsInput | number
    NGHD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    TRIGIA?: NullableFloatFieldUpdateOperationsInput | number | null
    KHACHHANG?: KHACHHANGUpdateOneWithoutHOADONNestedInput
    NHANVIEN?: NHANVIENUpdateOneWithoutHOADONNestedInput
  }

  export type HOADONUncheckedUpdateWithoutCTHDInput = {
    SOHD?: IntFieldUpdateOperationsInput | number
    NGHD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MAKH?: NullableStringFieldUpdateOperationsInput | string | null
    MANV?: NullableStringFieldUpdateOperationsInput | string | null
    TRIGIA?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type SANPHAMUpsertWithoutCTHDInput = {
    update: XOR<SANPHAMUpdateWithoutCTHDInput, SANPHAMUncheckedUpdateWithoutCTHDInput>
    create: XOR<SANPHAMCreateWithoutCTHDInput, SANPHAMUncheckedCreateWithoutCTHDInput>
    where?: SANPHAMWhereInput
  }

  export type SANPHAMUpdateToOneWithWhereWithoutCTHDInput = {
    where?: SANPHAMWhereInput
    data: XOR<SANPHAMUpdateWithoutCTHDInput, SANPHAMUncheckedUpdateWithoutCTHDInput>
  }

  export type SANPHAMUpdateWithoutCTHDInput = {
    MASP?: StringFieldUpdateOperationsInput | string
    TENSP?: NullableStringFieldUpdateOperationsInput | string | null
    DVT?: NullableStringFieldUpdateOperationsInput | string | null
    NUOCSX?: NullableStringFieldUpdateOperationsInput | string | null
    GIA?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type SANPHAMUncheckedUpdateWithoutCTHDInput = {
    MASP?: StringFieldUpdateOperationsInput | string
    TENSP?: NullableStringFieldUpdateOperationsInput | string | null
    DVT?: NullableStringFieldUpdateOperationsInput | string | null
    NUOCSX?: NullableStringFieldUpdateOperationsInput | string | null
    GIA?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type CTHDCreateWithoutHOADONInput = {
    SL?: number | null
    SANPHAM: SANPHAMCreateNestedOneWithoutCTHDInput
  }

  export type CTHDUncheckedCreateWithoutHOADONInput = {
    MASP: string
    SL?: number | null
  }

  export type CTHDCreateOrConnectWithoutHOADONInput = {
    where: CTHDWhereUniqueInput
    create: XOR<CTHDCreateWithoutHOADONInput, CTHDUncheckedCreateWithoutHOADONInput>
  }

  export type CTHDCreateManyHOADONInputEnvelope = {
    data: CTHDCreateManyHOADONInput | CTHDCreateManyHOADONInput[]
  }

  export type KHACHHANGCreateWithoutHOADONInput = {
    MAKH: string
    HOTEN?: string | null
    DCHI?: string | null
    SODT?: string | null
    NGSINH?: Date | string | null
    NGDK?: Date | string | null
    DOANHSO?: number | null
  }

  export type KHACHHANGUncheckedCreateWithoutHOADONInput = {
    MAKH: string
    HOTEN?: string | null
    DCHI?: string | null
    SODT?: string | null
    NGSINH?: Date | string | null
    NGDK?: Date | string | null
    DOANHSO?: number | null
  }

  export type KHACHHANGCreateOrConnectWithoutHOADONInput = {
    where: KHACHHANGWhereUniqueInput
    create: XOR<KHACHHANGCreateWithoutHOADONInput, KHACHHANGUncheckedCreateWithoutHOADONInput>
  }

  export type NHANVIENCreateWithoutHOADONInput = {
    MANV: string
    HOTEN?: string | null
    SODT?: string | null
    NGVL?: Date | string | null
  }

  export type NHANVIENUncheckedCreateWithoutHOADONInput = {
    MANV: string
    HOTEN?: string | null
    SODT?: string | null
    NGVL?: Date | string | null
  }

  export type NHANVIENCreateOrConnectWithoutHOADONInput = {
    where: NHANVIENWhereUniqueInput
    create: XOR<NHANVIENCreateWithoutHOADONInput, NHANVIENUncheckedCreateWithoutHOADONInput>
  }

  export type CTHDUpsertWithWhereUniqueWithoutHOADONInput = {
    where: CTHDWhereUniqueInput
    update: XOR<CTHDUpdateWithoutHOADONInput, CTHDUncheckedUpdateWithoutHOADONInput>
    create: XOR<CTHDCreateWithoutHOADONInput, CTHDUncheckedCreateWithoutHOADONInput>
  }

  export type CTHDUpdateWithWhereUniqueWithoutHOADONInput = {
    where: CTHDWhereUniqueInput
    data: XOR<CTHDUpdateWithoutHOADONInput, CTHDUncheckedUpdateWithoutHOADONInput>
  }

  export type CTHDUpdateManyWithWhereWithoutHOADONInput = {
    where: CTHDScalarWhereInput
    data: XOR<CTHDUpdateManyMutationInput, CTHDUncheckedUpdateManyWithoutHOADONInput>
  }

  export type CTHDScalarWhereInput = {
    AND?: CTHDScalarWhereInput | CTHDScalarWhereInput[]
    OR?: CTHDScalarWhereInput[]
    NOT?: CTHDScalarWhereInput | CTHDScalarWhereInput[]
    SOHD?: IntFilter<"CTHD"> | number
    MASP?: StringFilter<"CTHD"> | string
    SL?: IntNullableFilter<"CTHD"> | number | null
  }

  export type KHACHHANGUpsertWithoutHOADONInput = {
    update: XOR<KHACHHANGUpdateWithoutHOADONInput, KHACHHANGUncheckedUpdateWithoutHOADONInput>
    create: XOR<KHACHHANGCreateWithoutHOADONInput, KHACHHANGUncheckedCreateWithoutHOADONInput>
    where?: KHACHHANGWhereInput
  }

  export type KHACHHANGUpdateToOneWithWhereWithoutHOADONInput = {
    where?: KHACHHANGWhereInput
    data: XOR<KHACHHANGUpdateWithoutHOADONInput, KHACHHANGUncheckedUpdateWithoutHOADONInput>
  }

  export type KHACHHANGUpdateWithoutHOADONInput = {
    MAKH?: StringFieldUpdateOperationsInput | string
    HOTEN?: NullableStringFieldUpdateOperationsInput | string | null
    DCHI?: NullableStringFieldUpdateOperationsInput | string | null
    SODT?: NullableStringFieldUpdateOperationsInput | string | null
    NGSINH?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    NGDK?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DOANHSO?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type KHACHHANGUncheckedUpdateWithoutHOADONInput = {
    MAKH?: StringFieldUpdateOperationsInput | string
    HOTEN?: NullableStringFieldUpdateOperationsInput | string | null
    DCHI?: NullableStringFieldUpdateOperationsInput | string | null
    SODT?: NullableStringFieldUpdateOperationsInput | string | null
    NGSINH?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    NGDK?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DOANHSO?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type NHANVIENUpsertWithoutHOADONInput = {
    update: XOR<NHANVIENUpdateWithoutHOADONInput, NHANVIENUncheckedUpdateWithoutHOADONInput>
    create: XOR<NHANVIENCreateWithoutHOADONInput, NHANVIENUncheckedCreateWithoutHOADONInput>
    where?: NHANVIENWhereInput
  }

  export type NHANVIENUpdateToOneWithWhereWithoutHOADONInput = {
    where?: NHANVIENWhereInput
    data: XOR<NHANVIENUpdateWithoutHOADONInput, NHANVIENUncheckedUpdateWithoutHOADONInput>
  }

  export type NHANVIENUpdateWithoutHOADONInput = {
    MANV?: StringFieldUpdateOperationsInput | string
    HOTEN?: NullableStringFieldUpdateOperationsInput | string | null
    SODT?: NullableStringFieldUpdateOperationsInput | string | null
    NGVL?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NHANVIENUncheckedUpdateWithoutHOADONInput = {
    MANV?: StringFieldUpdateOperationsInput | string
    HOTEN?: NullableStringFieldUpdateOperationsInput | string | null
    SODT?: NullableStringFieldUpdateOperationsInput | string | null
    NGVL?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type HOADONCreateWithoutKHACHHANGInput = {
    SOHD: number
    NGHD?: Date | string | null
    TRIGIA?: number | null
    CTHD?: CTHDCreateNestedManyWithoutHOADONInput
    NHANVIEN?: NHANVIENCreateNestedOneWithoutHOADONInput
  }

  export type HOADONUncheckedCreateWithoutKHACHHANGInput = {
    SOHD: number
    NGHD?: Date | string | null
    MANV?: string | null
    TRIGIA?: number | null
    CTHD?: CTHDUncheckedCreateNestedManyWithoutHOADONInput
  }

  export type HOADONCreateOrConnectWithoutKHACHHANGInput = {
    where: HOADONWhereUniqueInput
    create: XOR<HOADONCreateWithoutKHACHHANGInput, HOADONUncheckedCreateWithoutKHACHHANGInput>
  }

  export type HOADONCreateManyKHACHHANGInputEnvelope = {
    data: HOADONCreateManyKHACHHANGInput | HOADONCreateManyKHACHHANGInput[]
  }

  export type HOADONUpsertWithWhereUniqueWithoutKHACHHANGInput = {
    where: HOADONWhereUniqueInput
    update: XOR<HOADONUpdateWithoutKHACHHANGInput, HOADONUncheckedUpdateWithoutKHACHHANGInput>
    create: XOR<HOADONCreateWithoutKHACHHANGInput, HOADONUncheckedCreateWithoutKHACHHANGInput>
  }

  export type HOADONUpdateWithWhereUniqueWithoutKHACHHANGInput = {
    where: HOADONWhereUniqueInput
    data: XOR<HOADONUpdateWithoutKHACHHANGInput, HOADONUncheckedUpdateWithoutKHACHHANGInput>
  }

  export type HOADONUpdateManyWithWhereWithoutKHACHHANGInput = {
    where: HOADONScalarWhereInput
    data: XOR<HOADONUpdateManyMutationInput, HOADONUncheckedUpdateManyWithoutKHACHHANGInput>
  }

  export type HOADONScalarWhereInput = {
    AND?: HOADONScalarWhereInput | HOADONScalarWhereInput[]
    OR?: HOADONScalarWhereInput[]
    NOT?: HOADONScalarWhereInput | HOADONScalarWhereInput[]
    SOHD?: IntFilter<"HOADON"> | number
    NGHD?: DateTimeNullableFilter<"HOADON"> | Date | string | null
    MAKH?: StringNullableFilter<"HOADON"> | string | null
    MANV?: StringNullableFilter<"HOADON"> | string | null
    TRIGIA?: FloatNullableFilter<"HOADON"> | number | null
  }

  export type HOADONCreateWithoutNHANVIENInput = {
    SOHD: number
    NGHD?: Date | string | null
    TRIGIA?: number | null
    CTHD?: CTHDCreateNestedManyWithoutHOADONInput
    KHACHHANG?: KHACHHANGCreateNestedOneWithoutHOADONInput
  }

  export type HOADONUncheckedCreateWithoutNHANVIENInput = {
    SOHD: number
    NGHD?: Date | string | null
    MAKH?: string | null
    TRIGIA?: number | null
    CTHD?: CTHDUncheckedCreateNestedManyWithoutHOADONInput
  }

  export type HOADONCreateOrConnectWithoutNHANVIENInput = {
    where: HOADONWhereUniqueInput
    create: XOR<HOADONCreateWithoutNHANVIENInput, HOADONUncheckedCreateWithoutNHANVIENInput>
  }

  export type HOADONCreateManyNHANVIENInputEnvelope = {
    data: HOADONCreateManyNHANVIENInput | HOADONCreateManyNHANVIENInput[]
  }

  export type HOADONUpsertWithWhereUniqueWithoutNHANVIENInput = {
    where: HOADONWhereUniqueInput
    update: XOR<HOADONUpdateWithoutNHANVIENInput, HOADONUncheckedUpdateWithoutNHANVIENInput>
    create: XOR<HOADONCreateWithoutNHANVIENInput, HOADONUncheckedCreateWithoutNHANVIENInput>
  }

  export type HOADONUpdateWithWhereUniqueWithoutNHANVIENInput = {
    where: HOADONWhereUniqueInput
    data: XOR<HOADONUpdateWithoutNHANVIENInput, HOADONUncheckedUpdateWithoutNHANVIENInput>
  }

  export type HOADONUpdateManyWithWhereWithoutNHANVIENInput = {
    where: HOADONScalarWhereInput
    data: XOR<HOADONUpdateManyMutationInput, HOADONUncheckedUpdateManyWithoutNHANVIENInput>
  }

  export type CTHDCreateWithoutSANPHAMInput = {
    SL?: number | null
    HOADON: HOADONCreateNestedOneWithoutCTHDInput
  }

  export type CTHDUncheckedCreateWithoutSANPHAMInput = {
    SOHD: number
    SL?: number | null
  }

  export type CTHDCreateOrConnectWithoutSANPHAMInput = {
    where: CTHDWhereUniqueInput
    create: XOR<CTHDCreateWithoutSANPHAMInput, CTHDUncheckedCreateWithoutSANPHAMInput>
  }

  export type CTHDCreateManySANPHAMInputEnvelope = {
    data: CTHDCreateManySANPHAMInput | CTHDCreateManySANPHAMInput[]
  }

  export type CTHDUpsertWithWhereUniqueWithoutSANPHAMInput = {
    where: CTHDWhereUniqueInput
    update: XOR<CTHDUpdateWithoutSANPHAMInput, CTHDUncheckedUpdateWithoutSANPHAMInput>
    create: XOR<CTHDCreateWithoutSANPHAMInput, CTHDUncheckedCreateWithoutSANPHAMInput>
  }

  export type CTHDUpdateWithWhereUniqueWithoutSANPHAMInput = {
    where: CTHDWhereUniqueInput
    data: XOR<CTHDUpdateWithoutSANPHAMInput, CTHDUncheckedUpdateWithoutSANPHAMInput>
  }

  export type CTHDUpdateManyWithWhereWithoutSANPHAMInput = {
    where: CTHDScalarWhereInput
    data: XOR<CTHDUpdateManyMutationInput, CTHDUncheckedUpdateManyWithoutSANPHAMInput>
  }

  export type CTHDCreateManyHOADONInput = {
    MASP: string
    SL?: number | null
  }

  export type CTHDUpdateWithoutHOADONInput = {
    SL?: NullableIntFieldUpdateOperationsInput | number | null
    SANPHAM?: SANPHAMUpdateOneRequiredWithoutCTHDNestedInput
  }

  export type CTHDUncheckedUpdateWithoutHOADONInput = {
    MASP?: StringFieldUpdateOperationsInput | string
    SL?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CTHDUncheckedUpdateManyWithoutHOADONInput = {
    MASP?: StringFieldUpdateOperationsInput | string
    SL?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type HOADONCreateManyKHACHHANGInput = {
    SOHD: number
    NGHD?: Date | string | null
    MANV?: string | null
    TRIGIA?: number | null
  }

  export type HOADONUpdateWithoutKHACHHANGInput = {
    SOHD?: IntFieldUpdateOperationsInput | number
    NGHD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    TRIGIA?: NullableFloatFieldUpdateOperationsInput | number | null
    CTHD?: CTHDUpdateManyWithoutHOADONNestedInput
    NHANVIEN?: NHANVIENUpdateOneWithoutHOADONNestedInput
  }

  export type HOADONUncheckedUpdateWithoutKHACHHANGInput = {
    SOHD?: IntFieldUpdateOperationsInput | number
    NGHD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MANV?: NullableStringFieldUpdateOperationsInput | string | null
    TRIGIA?: NullableFloatFieldUpdateOperationsInput | number | null
    CTHD?: CTHDUncheckedUpdateManyWithoutHOADONNestedInput
  }

  export type HOADONUncheckedUpdateManyWithoutKHACHHANGInput = {
    SOHD?: IntFieldUpdateOperationsInput | number
    NGHD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MANV?: NullableStringFieldUpdateOperationsInput | string | null
    TRIGIA?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type HOADONCreateManyNHANVIENInput = {
    SOHD: number
    NGHD?: Date | string | null
    MAKH?: string | null
    TRIGIA?: number | null
  }

  export type HOADONUpdateWithoutNHANVIENInput = {
    SOHD?: IntFieldUpdateOperationsInput | number
    NGHD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    TRIGIA?: NullableFloatFieldUpdateOperationsInput | number | null
    CTHD?: CTHDUpdateManyWithoutHOADONNestedInput
    KHACHHANG?: KHACHHANGUpdateOneWithoutHOADONNestedInput
  }

  export type HOADONUncheckedUpdateWithoutNHANVIENInput = {
    SOHD?: IntFieldUpdateOperationsInput | number
    NGHD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MAKH?: NullableStringFieldUpdateOperationsInput | string | null
    TRIGIA?: NullableFloatFieldUpdateOperationsInput | number | null
    CTHD?: CTHDUncheckedUpdateManyWithoutHOADONNestedInput
  }

  export type HOADONUncheckedUpdateManyWithoutNHANVIENInput = {
    SOHD?: IntFieldUpdateOperationsInput | number
    NGHD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MAKH?: NullableStringFieldUpdateOperationsInput | string | null
    TRIGIA?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type CTHDCreateManySANPHAMInput = {
    SOHD: number
    SL?: number | null
  }

  export type CTHDUpdateWithoutSANPHAMInput = {
    SL?: NullableIntFieldUpdateOperationsInput | number | null
    HOADON?: HOADONUpdateOneRequiredWithoutCTHDNestedInput
  }

  export type CTHDUncheckedUpdateWithoutSANPHAMInput = {
    SOHD?: IntFieldUpdateOperationsInput | number
    SL?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CTHDUncheckedUpdateManyWithoutSANPHAMInput = {
    SOHD?: IntFieldUpdateOperationsInput | number
    SL?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use HOADONCountOutputTypeDefaultArgs instead
     */
    export type HOADONCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = HOADONCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KHACHHANGCountOutputTypeDefaultArgs instead
     */
    export type KHACHHANGCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = KHACHHANGCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NHANVIENCountOutputTypeDefaultArgs instead
     */
    export type NHANVIENCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = NHANVIENCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SANPHAMCountOutputTypeDefaultArgs instead
     */
    export type SANPHAMCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = SANPHAMCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CTHDDefaultArgs instead
     */
    export type CTHDArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = CTHDDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HOADONDefaultArgs instead
     */
    export type HOADONArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = HOADONDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KHACHHANGDefaultArgs instead
     */
    export type KHACHHANGArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = KHACHHANGDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NHANVIENDefaultArgs instead
     */
    export type NHANVIENArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = NHANVIENDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SANPHAMDefaultArgs instead
     */
    export type SANPHAMArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = SANPHAMDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}